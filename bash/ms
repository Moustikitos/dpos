#! /usr/bin/env python
# -*- encoding:utf-8 -*-

"""
Usage:
   ms start-api [-p <api-port>]
   ms start-app [-p <port> -s <server>]
   ms (stop-api | stop-app)
   ms (log-api | log-app)

Options:
-p --port=<port>       : the port to use [default: 5050]
-s --server=<server>   : the ms-api server to link to [default: http://127.0.0.1:5050]

Subcommands:
   start-api     : start multi signature server
   start-app     : start multi signature app
   stop-api/app  : stop multi signature server/app
   log-api/app   : show multi signature server/app logs
"""

import os
import sys
import docopt

# add git installation
sys.path.append(os.path.abspath(os.path.expanduser("~/dpos")))
# add parent path if executed from git structure
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))


# ubuntu systemd service template
MSAPI = """[Unit]
Description=Ms api server
After=network.target

[Service]
User=${USER}
WorkingDirectory=${HOME}/.local/share/ms-server
Environment=PYTHONPATH=${PYTHONPATH}:${HOME}/dpos
ExecStart=${HOME}/.local/share/ms-server/venv/bin/gunicorn mssrv:app --bind=0.0.0.0:%(port)s --workers=5 --access-logfile -
Restart=always

[Install]
WantedBy=multi-user.target
"""

MSAPP = r'''[Unit]
Description=Ms api server
After=network.target

[Service]
User=${USER}
WorkingDirectory=${HOME}/.local/share/ms-server
Environment=PYTHONPATH=${PYTHONPATH}:${HOME}/dpos
ExecStart=${HOME}/.local/share/ms-server/venv/bin/gunicorn 'mssrv.app.srv:create_app(mssrv=\"%(server)s\")' --bind=0.0.0.0:%(port)s --workers=5 --access-logfile -
Restart=always

[Install]
WantedBy=multi-user.target
'''


def start_api(args={}, **options):
    os.system('echo "%s" > ~/msapi.service' % (MSAPI % options))
    os.system("sudo mv ~/msapi.service /etc/systemd/system")
    os.system("sudo systemctl daemon-reload")
    if not os.system("sudo systemctl restart msapi"):
        os.system("sudo systemctl start msapi")


def stop_api(args={}, **options):
    os.system("sudo systemctl stop msapi")


def start_app(args={}, **options):
    os.system('echo "%s" > ~/msapp.service' % (MSAPP % options))
    os.system("sudo mv ~/msapp.service /etc/systemd/system")
    os.system("sudo systemctl daemon-reload")
    if not os.system("sudo systemctl restart msapp"):
        os.system("sudo systemctl start msapp")


def stop_app(args={}, **options):
    os.system("sudo systemctl stop msapp")


def log_api(args={}, **options):
    os.system("sudo journalctl -u msapi -ef")


def log_app(args={}, **options):
    os.system("sudo journalctl -u msapp -ef")


# command line execution
########################
if __name__ == "__main__":

    FILTER = {
        "--server": lambda value: value,
        "--port": lambda value: value,
    }

    # will get the first argument which is neither a value neither an option
    def getAction(args):
        for action in [k for k in args if k[0] not in ["-", "<"]]:
            if args[action] is True:
                return action
        return False

    # will rename --multi-word-option to multi_word_option
    def getOptions(args):
        options = {}
        for option, value in [
            (k, v) for k, v in args.items() if k.startswith("--")
            and v is not None
        ]:
            options[option[2:].replace("-", "_")] = value
        return dict((k, v) for k, v in options.items() if v is not None)

    # see http://docopt.org
    args = docopt.docopt(__doc__, argv=sys.argv[1:])
    for key, cast in [(k, c) for k, c in FILTER.items() if k in args]:
        args[key] = cast(args[key])

    action = getAction(args)
    options = getOptions(args)

    if action:
        # rename multi-word-action to multi_word_action
        func = getattr(sys.modules[__name__], action.replace("-", "_"))
        if callable(func):
            func(args, **options)
