{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dposlib: Ark API for Humans dposlib is a simple package providing efficient API to interact with Ark blockchain and its forks. It is designed to run with both python 2 and 3. Support this project Buy \u0466 and: [X] Send \u0466 to AUahWfkfr5J4tYakugRbfow7RWVTK35GPW [X] Vote arky on Ark blockchain and earn \u0466 weekly HTTP Requests >>> from dposlib import rest >>> # ~ https://explorer.ark.io:8443/api/delegates/arky >>> rest.GET.api.delegates.arky(peer=\"https://explorer.ark.io:8443\") {u'data': {u'username': u'arky', u'votes': u'172572088664599', u'blocks': {u'produced': 199859, u'last': {u'timestamp': {u'epoch': 84182056, u'unix': 1574283256, u'human': u'2019-11-20T20:54:16.000Z'}, u'id': u'5f5f9897f8fca2a5600ace0d75d67811c67df8111a7deea13d7d6b2c532fae43', u'height': 10380869}}, u'rank': 11, u'publicKey': u'030da05984d579395ce276c0dd6ca0a60140a3c3d964423a04e7abe110d60a15e9', u'production': {u'approval': 1.35}, u'forged': {u'total': u'40118247659340', u'rewards': u'39687400000000', u'fees': u'430847659340'}, u'address': u'ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE'}} >>> # using returnKey arktoshi values are converted to ark >>> rest.GET.api.transactions(peer=\"https://explorer.ark.io:8443\", returnKey=\"data\")[0] {u'fee': 0.00816, u'type': 0, u'sender': u'AKATy581uXWrbm8B4DTQh4R9RbqaWRiKRY', u'timestamp': {u'epoch': 84182307, u'unix': 1574283507, u'human': u'2019-11-20T20:58:27.000Z'}, u'blockId': u'a1b305a87217c2f622a922a97a778c677f7dbd23031dae42e3b494883b855a70', u'vendorField': u'Payout from arkmoon', u'senderPublicKey': u'0232b96d57ac27f9a99242bc886e433baa89f596d435153c9dae47222c0d1cecc3', u'amount': 20.52064264, u'version': 1, u'signSignature': u'304402200ac41802f33a5f377975efc9ebf39a666a9d76c2facb8773783289df7f6a9cd302206c5d2aed3359d3858fb3f4d5fc2a76952eb518cf9d242bb91fd11c0801e4ea4e', u'confirmations': 21, u'signature': u'3045022100dc6dbaa4b056f10268b587da290900725246e3239df1fa3e3c53445da36f03ee02206d57bbdff6d7f9ebca719a41112f23128f1a84161dd82597d63351e3c4d868b0', u'recipient': u'AXPLW2TzBsXcPiaeVGBSELEAXj4RPaWNjB', u'id': u'efeab09925c3347b4a18854a9192d7d722ee32850a7bf91d57628cb77714192e'} >>> # peer keyword is not mandatory when a blockchain is linked using rest.use directive >>> rest.use(\"ark\") >>> # ~ GET /api/blocks endpoint >>> rest.GET.api.blocks(returnKey=\"data\")[0] {u'payload': {u'length': 0, u'hash': u'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, u'generator': {u'username': u'arkmoon', u'publicKey': u'0232b96d57ac27f9a99242bc886e433baa89f596d435153c9dae47222c0d1cecc3', u'address': u'AKATy581uXWrbm8B4DTQh4R9RbqaWRiKRY'}, u'transactions': 0, u'timestamp': {u'epoch': 84183376, u'unix': 1574284576, u'human': u'2019-11-20T21:16:16.000Z'}, u'height': 10381034, u'version': 0, u'forged': {u'fee': 0.0, u'amount': 0.0, u'total': 2.0, u'reward': 2.0}, u'confirmations': 1, u'signature': u'3045022100a8b6b48c0094f9c84b7da5ae457ca33d5ba0d9a3df963c1e17c42cb52fb563a9022020ea96cf76529943b03b864bbb722352ef6faf5701e36bc16f9903ec2234309b', u'id': u'd2e042495ab64e7cf5bb0fc8d4ce6972a98f29a56d960b707f3c6abd2791a5e2', u'previous': u'ea1b7082424592545860a671a77ef7f59c3730665208080d2481e363be6c1ed0'} Signature issuers ECDSA and SCHNORR signatures can be performed using dposlib.ark.sig and dposlib.ark.crypto modules: >>> import dposlib.ark.sig as sig >>> import dposlib.ark.crypto as crypto >>> keys = crypto.getKeys(\"secret\") >>> keys {'publicKey': '03a02b9d5fdd1307c2ee4652ba54d492d1fd11a7d1bb3f3a44c4a05e79f19de933', 'privateKey': '2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b', 'wif': 'SB3BGPGRh1SRuQd52h7f5jsHUg1G9ATEvSeA7L5Bz4qySQww4k7N'} >>> s = sig.Signature.ecdsa_sign(\"simple message\", keys[\"privateKey\"]) >>> s <secp256k1 signature: r:d811a0321a2e31b0492c1b1b1c4dc3b58055b53cdc9308492b3de71c765f5914 s:4747219a0d74d49a42305c040a91e6a8acd39e6d06b21ec1805bd31c6d871b4f > >>> s.der b\"0D\\x02N\\x13\\x108J\\xd0\\xd6\\xff\\x80'\\xf2\\xf8`\\xd6(\\xb2\\xa6@\\x03\\x0bF#\\xa3\\x93\\xe1\\xdf&\\xf7\\xdd\\xce\\\\u\\x02g\\x8b\\xa9\\x90V\\xaa\\xdf\\xa7\\xf2-;z\\xa5.D\\x8bq8ehG\\xb7\\x11\\x07-`\\xd2\\xd9\\xd3.\\xc4v\" >>> crypto.hexlify(s.der) '3044022041e5aa3da79523a2b342180cb7c04056f8f02e005ea6ec1f14094c66d692f04402200261177cdd88525249a0619d6009adbc6681c250c83748c0cde611f21f543008' >>> crypto.hexlify(s.raw) '4e1310384ad0d6ff8027f2f860d628b2a640030b4623a393e1df26f7ddce5c75678ba99056aadfa7f22d3b7aa52e448b7138656847b711072d60d2d9d32ec476' >>> crypto.hexlify(sig.Signature.schnorr_sign(\"simple message\", keys[\"privateKey\"]).raw) '5fbb0bb00b043400e1fc435c867c738ac80d2c268cd2d61616785315ad330c884a3cfb50bf0da8de9021d42ce2139b6b6547d2bcd884a2da7f5c2e9bfb9cb206' Transaction builders dposlib.ark.v2 package provides dposlib.blockchain.tx.Transaction class and its associated builders. >>> from dposlib import rest >>> rest.use(\"dark\") True >>> from dposlib.ark.v2 import * >>> tx = transfer(1, \"D7seWn8JLVwX4nHd9hh2Lf7gvZNiRJ7qLk\", u\"simple message with sparkle \\u2728\", version=2) >>> tx.finalize(\"first secret\", \"second secret\") >>> tx { \"amount\": 100000000, \"asset\": {}, \"expiration\": 0, \"fee\": 4013642, \"id\": \"041ad1e3dd06d29ef59b2c7e19fea4ced0e7fcf9fdc22edcf26e5cc016e10f38\", \"network\": 30, \"nonce\": 377, \"recipientId\": \"D7seWn8JLVwX4nHd9hh2Lf7gvZNiRJ7qLk\", \"senderId\": \"D7seWn8JLVwX4nHd9hh2Lf7gvZNiRJ7qLk\", \"senderPublicKey\": \"03a02b9d5fdd1307c2ee4652ba54d492d1fd11a7d1bb3f3a44c4a05e79f19de933\", \"signSignature\": \"3d29356c77b63c2d6ce679dad95961b40ea606823bf729a158df5c8378c79c5588ad675ee147a7f77b18518c5bdf9b1a73567d72c3af0bfbe22043b9e1a95e6f\", \"signature\": \"871ac31e7bad08b684b27f1b8a4b9f9f760bb32d1d36cc03e03872edc6070f8d9fec2621ea87e2ea0ae7750e0e7a5db52f39b32e05af76a4331a92e17dbe9f4a\", \"timestamp\": 84186531, \"type\": 0, \"typeGroup\": 1, \"vendorField\": \"simple message with sparkle \\u2728\", \"version\": 2 } >>> broadcastTransactions(tx) {u'data': {u'broadcast': [u'041ad1e3dd06d29ef59b2c7e19fea4ced0e7fcf9fdc22edcf26e5cc016e10f38'], u'invalid': [], u'accept': [u'041ad1e3dd06d29ef59b2c7e19fea4ced0e7fcf9fdc22edcf26e5cc016e10f38'], u'excess': []}}","title":"Home"},{"location":"#dposlib-ark-api-for-humans","text":"dposlib is a simple package providing efficient API to interact with Ark blockchain and its forks. It is designed to run with both python 2 and 3.","title":"dposlib: Ark API for Humans"},{"location":"#support-this-project","text":"Buy \u0466 and: [X] Send \u0466 to AUahWfkfr5J4tYakugRbfow7RWVTK35GPW [X] Vote arky on Ark blockchain and earn \u0466 weekly","title":"Support this project"},{"location":"#http-requests","text":">>> from dposlib import rest >>> # ~ https://explorer.ark.io:8443/api/delegates/arky >>> rest.GET.api.delegates.arky(peer=\"https://explorer.ark.io:8443\") {u'data': {u'username': u'arky', u'votes': u'172572088664599', u'blocks': {u'produced': 199859, u'last': {u'timestamp': {u'epoch': 84182056, u'unix': 1574283256, u'human': u'2019-11-20T20:54:16.000Z'}, u'id': u'5f5f9897f8fca2a5600ace0d75d67811c67df8111a7deea13d7d6b2c532fae43', u'height': 10380869}}, u'rank': 11, u'publicKey': u'030da05984d579395ce276c0dd6ca0a60140a3c3d964423a04e7abe110d60a15e9', u'production': {u'approval': 1.35}, u'forged': {u'total': u'40118247659340', u'rewards': u'39687400000000', u'fees': u'430847659340'}, u'address': u'ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE'}} >>> # using returnKey arktoshi values are converted to ark >>> rest.GET.api.transactions(peer=\"https://explorer.ark.io:8443\", returnKey=\"data\")[0] {u'fee': 0.00816, u'type': 0, u'sender': u'AKATy581uXWrbm8B4DTQh4R9RbqaWRiKRY', u'timestamp': {u'epoch': 84182307, u'unix': 1574283507, u'human': u'2019-11-20T20:58:27.000Z'}, u'blockId': u'a1b305a87217c2f622a922a97a778c677f7dbd23031dae42e3b494883b855a70', u'vendorField': u'Payout from arkmoon', u'senderPublicKey': u'0232b96d57ac27f9a99242bc886e433baa89f596d435153c9dae47222c0d1cecc3', u'amount': 20.52064264, u'version': 1, u'signSignature': u'304402200ac41802f33a5f377975efc9ebf39a666a9d76c2facb8773783289df7f6a9cd302206c5d2aed3359d3858fb3f4d5fc2a76952eb518cf9d242bb91fd11c0801e4ea4e', u'confirmations': 21, u'signature': u'3045022100dc6dbaa4b056f10268b587da290900725246e3239df1fa3e3c53445da36f03ee02206d57bbdff6d7f9ebca719a41112f23128f1a84161dd82597d63351e3c4d868b0', u'recipient': u'AXPLW2TzBsXcPiaeVGBSELEAXj4RPaWNjB', u'id': u'efeab09925c3347b4a18854a9192d7d722ee32850a7bf91d57628cb77714192e'} >>> # peer keyword is not mandatory when a blockchain is linked using rest.use directive >>> rest.use(\"ark\") >>> # ~ GET /api/blocks endpoint >>> rest.GET.api.blocks(returnKey=\"data\")[0] {u'payload': {u'length': 0, u'hash': u'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'}, u'generator': {u'username': u'arkmoon', u'publicKey': u'0232b96d57ac27f9a99242bc886e433baa89f596d435153c9dae47222c0d1cecc3', u'address': u'AKATy581uXWrbm8B4DTQh4R9RbqaWRiKRY'}, u'transactions': 0, u'timestamp': {u'epoch': 84183376, u'unix': 1574284576, u'human': u'2019-11-20T21:16:16.000Z'}, u'height': 10381034, u'version': 0, u'forged': {u'fee': 0.0, u'amount': 0.0, u'total': 2.0, u'reward': 2.0}, u'confirmations': 1, u'signature': u'3045022100a8b6b48c0094f9c84b7da5ae457ca33d5ba0d9a3df963c1e17c42cb52fb563a9022020ea96cf76529943b03b864bbb722352ef6faf5701e36bc16f9903ec2234309b', u'id': u'd2e042495ab64e7cf5bb0fc8d4ce6972a98f29a56d960b707f3c6abd2791a5e2', u'previous': u'ea1b7082424592545860a671a77ef7f59c3730665208080d2481e363be6c1ed0'}","title":"HTTP Requests"},{"location":"#signature-issuers","text":"ECDSA and SCHNORR signatures can be performed using dposlib.ark.sig and dposlib.ark.crypto modules: >>> import dposlib.ark.sig as sig >>> import dposlib.ark.crypto as crypto >>> keys = crypto.getKeys(\"secret\") >>> keys {'publicKey': '03a02b9d5fdd1307c2ee4652ba54d492d1fd11a7d1bb3f3a44c4a05e79f19de933', 'privateKey': '2bb80d537b1da3e38bd30361aa855686bde0eacd7162fef6a25fe97bf527a25b', 'wif': 'SB3BGPGRh1SRuQd52h7f5jsHUg1G9ATEvSeA7L5Bz4qySQww4k7N'} >>> s = sig.Signature.ecdsa_sign(\"simple message\", keys[\"privateKey\"]) >>> s <secp256k1 signature: r:d811a0321a2e31b0492c1b1b1c4dc3b58055b53cdc9308492b3de71c765f5914 s:4747219a0d74d49a42305c040a91e6a8acd39e6d06b21ec1805bd31c6d871b4f > >>> s.der b\"0D\\x02N\\x13\\x108J\\xd0\\xd6\\xff\\x80'\\xf2\\xf8`\\xd6(\\xb2\\xa6@\\x03\\x0bF#\\xa3\\x93\\xe1\\xdf&\\xf7\\xdd\\xce\\\\u\\x02g\\x8b\\xa9\\x90V\\xaa\\xdf\\xa7\\xf2-;z\\xa5.D\\x8bq8ehG\\xb7\\x11\\x07-`\\xd2\\xd9\\xd3.\\xc4v\" >>> crypto.hexlify(s.der) '3044022041e5aa3da79523a2b342180cb7c04056f8f02e005ea6ec1f14094c66d692f04402200261177cdd88525249a0619d6009adbc6681c250c83748c0cde611f21f543008' >>> crypto.hexlify(s.raw) '4e1310384ad0d6ff8027f2f860d628b2a640030b4623a393e1df26f7ddce5c75678ba99056aadfa7f22d3b7aa52e448b7138656847b711072d60d2d9d32ec476' >>> crypto.hexlify(sig.Signature.schnorr_sign(\"simple message\", keys[\"privateKey\"]).raw) '5fbb0bb00b043400e1fc435c867c738ac80d2c268cd2d61616785315ad330c884a3cfb50bf0da8de9021d42ce2139b6b6547d2bcd884a2da7f5c2e9bfb9cb206'","title":"Signature issuers"},{"location":"#transaction-builders","text":"dposlib.ark.v2 package provides dposlib.blockchain.tx.Transaction class and its associated builders. >>> from dposlib import rest >>> rest.use(\"dark\") True >>> from dposlib.ark.v2 import * >>> tx = transfer(1, \"D7seWn8JLVwX4nHd9hh2Lf7gvZNiRJ7qLk\", u\"simple message with sparkle \\u2728\", version=2) >>> tx.finalize(\"first secret\", \"second secret\") >>> tx { \"amount\": 100000000, \"asset\": {}, \"expiration\": 0, \"fee\": 4013642, \"id\": \"041ad1e3dd06d29ef59b2c7e19fea4ced0e7fcf9fdc22edcf26e5cc016e10f38\", \"network\": 30, \"nonce\": 377, \"recipientId\": \"D7seWn8JLVwX4nHd9hh2Lf7gvZNiRJ7qLk\", \"senderId\": \"D7seWn8JLVwX4nHd9hh2Lf7gvZNiRJ7qLk\", \"senderPublicKey\": \"03a02b9d5fdd1307c2ee4652ba54d492d1fd11a7d1bb3f3a44c4a05e79f19de933\", \"signSignature\": \"3d29356c77b63c2d6ce679dad95961b40ea606823bf729a158df5c8378c79c5588ad675ee147a7f77b18518c5bdf9b1a73567d72c3af0bfbe22043b9e1a95e6f\", \"signature\": \"871ac31e7bad08b684b27f1b8a4b9f9f760bb32d1d36cc03e03872edc6070f8d9fec2621ea87e2ea0ae7750e0e7a5db52f39b32e05af76a4331a92e17dbe9f4a\", \"timestamp\": 84186531, \"type\": 0, \"typeGroup\": 1, \"vendorField\": \"simple message with sparkle \\u2728\", \"version\": 2 } >>> broadcastTransactions(tx) {u'data': {u'broadcast': [u'041ad1e3dd06d29ef59b2c7e19fea4ced0e7fcf9fdc22edcf26e5cc016e10f38'], u'invalid': [], u'accept': [u'041ad1e3dd06d29ef59b2c7e19fea4ced0e7fcf9fdc22edcf26e5cc016e10f38'], u'excess': []}}","title":"Transaction builders"},{"location":"ark/","text":"dposlib.ark Content Objects class Content(object) Live object connected to blockchain. It is initialized with dposlib.rest.GET request. Object is updated every 30s. Endpoint response can be a dict or a list . If it is a list , it is stored in data attribute else all fields are stored as instance attribute. >>> txs = dposlib.ark.Content(rest.GET.api.transactions) >>> txs.data[0][\"timestamp\"] { 'epoch': 121912776, 'unix': 1612013976, 'human': '2021-01-30T13:39:36.000Z' } >>> tx = dposlib.ark.Content( rest.GET.api.transactions, \"d36a164a54df9d1c7889521ece15318d6945e9971fecd0a96a9c18e74e0adbf9\", ) >>> tx.timestamp { 'epoch': 121919704, 'unix': 1612020904, 'human': '2021-01-30T15:35:04.000Z' } >>> tx.amount 212963052 >>> tx.datetime datetime.datetime(2021, 1, 30, 15, 35, 4, tzinfo=<UTC>) __init__ | __init__(ndpt, *args, **kwargs) Arguments : ndpt usrv.req.Endpoint - endpoint class to be called. *args - Variable length argument list used by usrv.req.Endpoint . Kwargs : keep_alive bool - set hook to update data from blockcahin. Default to True. filter | filter(data) Convert data as JSDict object converting string values in int if possible. Wallet Objects class Wallet(Content) Wallet root class that implements basic wallet behaviour. delegate Delegate attributes if wallet is registered as delegate. username Delegate username if wallet is registered as delegate. secondPublicKey Second public key if second signature is set to wallet. __init__ | __init__(ndpt, *args, **kwargs) Arguments : ndpt usrv.req.Endpoint - endpoint class to be called. *args - Variable length argument list used by dposlib.ark.Content . **kwargs - Variable key argument used by dposlib.ark.Content . Specific kwargs : keep_alive bool - automatic update data from blockcahin. Default to True. fee int or str - set fee level as fee multiplier string value or one of minFee , avgFee , maxFee . Default to avgFee . fee_included bool - set to True if amout + fee is the total desired out flow. Default to False. link | link(*args, **kwargs) See dposlib.ark.link . unlink | unlink() See dposlib.ark.unlink . send | @isLinked | send(amount, address, vendorField=None, expiration=0) Broadcast a transfer transaction to the ledger. See dposlib.ark.v2.transfer . setSecondSecret | @isLinked | setSecondSecret(secondSecret) Broadcast a second secret registration transaction to the ledger. See dposlib.ark.v2.registerSecondSecret . setSecondPublicKey | @isLinked | setSecondPublicKey(secondPublicKey) Broadcast a second secret registration transaction into the ledger. See dposlib.ark.v2.registerSecondPublicKey . setDelegate | @isLinked | setDelegate(username) Broadcast a delegate registration transaction to the ledger. See dposlib.ark.v2.registerAsDelegate . upVote | @isLinked | upVote(*usernames) Broadcast an up-vote transaction to the ledger. See dposlib.ark.v2.upVote . downVote | @isLinked | downVote(*usernames) Broadcast a down-vote transaction to the ledger. See dposlib.ark.v2.downVote . dposlib.ark.crypto getKeys getKeys(secret) Generate keyring containing secp256k1 keys-pair and wallet import format (WIF). Arguments : secret str, bytes or int - anything that could issue a private key on secp256k1 curve. Returns : dict - public, private and WIF keys. getMultiSignaturePublicKey getMultiSignaturePublicKey(minimum, *publicKeys) Compute ARK multi signature public key according to ARK AIP 18 . Arguments : minimum int - minimum signature required. publicKeys list of str - public key list. Returns : hex - the multisignature public key. getAddressFromSecret getAddressFromSecret(secret, marker=None) Compute ARK address from secret. Arguments : secret str - secret string. marker int - network marker (optional). Returns : base58 - the address. getAddress getAddress(publicKey, marker=None) Compute ARK address from publicKey. Arguments : publicKey str - public key. marker int - network marker (optional). Returns : base58 - the address. getWIF getWIF(seed) Compute WIF address from seed. Arguments : seed bytes - a sha256 sequence bytes. Returns : base58 - the WIF address. wifSignature wifSignature(tx, wif) Generate transaction signature using private key. Arguments : tx dict or Transaction - transaction description. wif str - wif key. Returns : hex - signature. wifSignatureFromBytes wifSignatureFromBytes(data, wif) Generate signature from data using WIF key. Arguments : data bytes - bytes sequence. wif str - wif key. Returns : hex - signature. getSignature getSignature(tx, privateKey, **options) Generate transaction signature using private key. Arguments : tx dict or Transaction - transaction description. privateKey str - private key as hex string. Options : exclude_sig bool - exclude signature during tx serialization. Defalut to True. exclude_multi_sig bool - exclude signatures during tx serialization. Defalut to True. exclude_second_sig bool - exclude second signatures during tx serialization. Defalut to True. Returns : hex - signature. getSignatureFromBytes getSignatureFromBytes(data, privateKey) Generate signature from data using private key. Arguments : data bytes - bytes sequence. privateKey str - private key as hex string. Returns : hex - signature. verifySignature verifySignature(value, publicKey, signature) Verify signature. Arguments : value str - value as hex string. publicKey str - public key as hex string. signature str - signature as hex string. Returns : bool - True if signature matches the public key. verifySignatureFromBytes verifySignatureFromBytes(data, publicKey, signature) Verify signature. Arguments : data bytes - data. publicKey str - public key as hex string. signature str - signature as hex string. Returns : bool - True if signature matches the public key. getId getId(tx) Generate transaction id. Arguments : tx dict or Transaction - transaction object. Returns : hex - id. getIdFromBytes getIdFromBytes(data) Generate data id. Arguments : data bytes - data as bytes sequence. Returns : hex - id. getBytes getBytes(tx, **options) Hash transaction. Arguments : tx dict or Transaction - transaction object. Options : exclude_sig bool - exclude signature during tx serialization. Defalut to True. exclude_multi_sig bool - exclude signatures during tx serialization. Defalut to True. exclude_second_sig bool - exclude second signatures during tx serialization. Defalut to True. Returns : bytes - transaction serial. checkTransaction checkTransaction(tx, secondPublicKey=None, multiPublicKeys=[]) Verify transaction validity. Arguments : tx dict or Transaction - transaction object. secondPublicKey str - second public key to use if needed. multiPublicKeys list - owners public keys (sorted according to associated type-4-tx asset). Returns : bool - True if transaction is valid. dposlib.ark.tx Transaction Objects class Transaction(dict) A python dict that implements all the necessities to manually generate valid transactions. feeIncluded If True then amount + fee = total arktoshi flow useDynamicFee | @staticmethod | useDynamicFee(value=\"minFee\") Activate and configure dynamic fees parameters. Value can be either an integer defining the fee multiplier constant or a string defining the fee level to use acccording to the 30-days-average. possible values are avgFee minFee (default) and maxFee . Arguments : value str or int - constant or fee multiplier. link | link(secret=None, secondSecret=None) Save public and private keys derived from secrets. This is equivalent to wallet login. it limits number of secret keyboard entries. Arguments : secret str - passphrase. secondSecret str - second passphrase. sign | sign() Generate the signature field. Private key have to be set first. signSign | signSign() Generate the signSignature field. Transaction have to be signed and second private key have to be set first. signWithSecret | signWithSecret(secret) Generate the signature field using passphrase. The associated public and private keys are stored till dposlib.ark.unlink is called. Arguments : secret str - passphrase. signSignWithSecondSecret | signSignWithSecondSecret(secondSecret) Generate the signSignature field using second passphrase. The associated second public and private keys are stored till dposlib.ark.unlink is called. Arguments : secondSecret str - second passphrase. multiSignWithSecret | multiSignWithSecret(secret) Add a signature in signatures field. Arguments : index int - signature index. secret str - passphrase. signWithKeys | signWithKeys(publicKey, privateKey) Generate the signature field using public and private keys. They are stored till dposlib.ark.unlink is called. Arguments : publicKey str - public key as hex string. privateKey str - private key as hex string. signSignWithKey | signSignWithKey(secondPrivateKey) Generate the signSignature field using second private key. It is stored till dposlib.ark.unlink is called. Arguments : secondPrivateKey str - second private key as hex string. multiSignWithKey | multiSignWithKey(privateKey) Add a signature in signatures field according to given index and privateKey. Arguments : privateKey str - private key as hex string. identify | identify() Generate the id field. Transaction have to be signed. finalize | finalize(secret=None, secondSecret=None, fee=None, fee_included=False) Finalize a transaction by setting fee , signatures and id . Arguments : secret str - passphrase. secondSecret str - second passphrase. fee int - manually set fee value in arktoshi . fee_included bool - see dposlib.ark.tx.Transaction.feeIncluded .","title":"Ark"},{"location":"ark/#dposlibark","text":"","title":"dposlib.ark"},{"location":"ark/#content-objects","text":"class Content(object) Live object connected to blockchain. It is initialized with dposlib.rest.GET request. Object is updated every 30s. Endpoint response can be a dict or a list . If it is a list , it is stored in data attribute else all fields are stored as instance attribute. >>> txs = dposlib.ark.Content(rest.GET.api.transactions) >>> txs.data[0][\"timestamp\"] { 'epoch': 121912776, 'unix': 1612013976, 'human': '2021-01-30T13:39:36.000Z' } >>> tx = dposlib.ark.Content( rest.GET.api.transactions, \"d36a164a54df9d1c7889521ece15318d6945e9971fecd0a96a9c18e74e0adbf9\", ) >>> tx.timestamp { 'epoch': 121919704, 'unix': 1612020904, 'human': '2021-01-30T15:35:04.000Z' } >>> tx.amount 212963052 >>> tx.datetime datetime.datetime(2021, 1, 30, 15, 35, 4, tzinfo=<UTC>)","title":"Content Objects"},{"location":"ark/#__init__","text":"| __init__(ndpt, *args, **kwargs) Arguments : ndpt usrv.req.Endpoint - endpoint class to be called. *args - Variable length argument list used by usrv.req.Endpoint . Kwargs : keep_alive bool - set hook to update data from blockcahin. Default to True.","title":"__init__"},{"location":"ark/#filter","text":"| filter(data) Convert data as JSDict object converting string values in int if possible.","title":"filter"},{"location":"ark/#wallet-objects","text":"class Wallet(Content) Wallet root class that implements basic wallet behaviour.","title":"Wallet Objects"},{"location":"ark/#delegate","text":"Delegate attributes if wallet is registered as delegate.","title":"delegate"},{"location":"ark/#username","text":"Delegate username if wallet is registered as delegate.","title":"username"},{"location":"ark/#secondpublickey","text":"Second public key if second signature is set to wallet.","title":"secondPublicKey"},{"location":"ark/#__init___1","text":"| __init__(ndpt, *args, **kwargs) Arguments : ndpt usrv.req.Endpoint - endpoint class to be called. *args - Variable length argument list used by dposlib.ark.Content . **kwargs - Variable key argument used by dposlib.ark.Content . Specific kwargs : keep_alive bool - automatic update data from blockcahin. Default to True. fee int or str - set fee level as fee multiplier string value or one of minFee , avgFee , maxFee . Default to avgFee . fee_included bool - set to True if amout + fee is the total desired out flow. Default to False.","title":"__init__"},{"location":"ark/#link","text":"| link(*args, **kwargs) See dposlib.ark.link .","title":"link"},{"location":"ark/#unlink","text":"| unlink() See dposlib.ark.unlink .","title":"unlink"},{"location":"ark/#send","text":"| @isLinked | send(amount, address, vendorField=None, expiration=0) Broadcast a transfer transaction to the ledger. See dposlib.ark.v2.transfer .","title":"send"},{"location":"ark/#setsecondsecret","text":"| @isLinked | setSecondSecret(secondSecret) Broadcast a second secret registration transaction to the ledger. See dposlib.ark.v2.registerSecondSecret .","title":"setSecondSecret"},{"location":"ark/#setsecondpublickey","text":"| @isLinked | setSecondPublicKey(secondPublicKey) Broadcast a second secret registration transaction into the ledger. See dposlib.ark.v2.registerSecondPublicKey .","title":"setSecondPublicKey"},{"location":"ark/#setdelegate","text":"| @isLinked | setDelegate(username) Broadcast a delegate registration transaction to the ledger. See dposlib.ark.v2.registerAsDelegate .","title":"setDelegate"},{"location":"ark/#upvote","text":"| @isLinked | upVote(*usernames) Broadcast an up-vote transaction to the ledger. See dposlib.ark.v2.upVote .","title":"upVote"},{"location":"ark/#downvote","text":"| @isLinked | downVote(*usernames) Broadcast a down-vote transaction to the ledger. See dposlib.ark.v2.downVote .","title":"downVote"},{"location":"ark/#dposlibarkcrypto","text":"","title":"dposlib.ark.crypto"},{"location":"ark/#getkeys","text":"getKeys(secret) Generate keyring containing secp256k1 keys-pair and wallet import format (WIF). Arguments : secret str, bytes or int - anything that could issue a private key on secp256k1 curve. Returns : dict - public, private and WIF keys.","title":"getKeys"},{"location":"ark/#getmultisignaturepublickey","text":"getMultiSignaturePublicKey(minimum, *publicKeys) Compute ARK multi signature public key according to ARK AIP 18 . Arguments : minimum int - minimum signature required. publicKeys list of str - public key list. Returns : hex - the multisignature public key.","title":"getMultiSignaturePublicKey"},{"location":"ark/#getaddressfromsecret","text":"getAddressFromSecret(secret, marker=None) Compute ARK address from secret. Arguments : secret str - secret string. marker int - network marker (optional). Returns : base58 - the address.","title":"getAddressFromSecret"},{"location":"ark/#getaddress","text":"getAddress(publicKey, marker=None) Compute ARK address from publicKey. Arguments : publicKey str - public key. marker int - network marker (optional). Returns : base58 - the address.","title":"getAddress"},{"location":"ark/#getwif","text":"getWIF(seed) Compute WIF address from seed. Arguments : seed bytes - a sha256 sequence bytes. Returns : base58 - the WIF address.","title":"getWIF"},{"location":"ark/#wifsignature","text":"wifSignature(tx, wif) Generate transaction signature using private key. Arguments : tx dict or Transaction - transaction description. wif str - wif key. Returns : hex - signature.","title":"wifSignature"},{"location":"ark/#wifsignaturefrombytes","text":"wifSignatureFromBytes(data, wif) Generate signature from data using WIF key. Arguments : data bytes - bytes sequence. wif str - wif key. Returns : hex - signature.","title":"wifSignatureFromBytes"},{"location":"ark/#getsignature","text":"getSignature(tx, privateKey, **options) Generate transaction signature using private key. Arguments : tx dict or Transaction - transaction description. privateKey str - private key as hex string. Options : exclude_sig bool - exclude signature during tx serialization. Defalut to True. exclude_multi_sig bool - exclude signatures during tx serialization. Defalut to True. exclude_second_sig bool - exclude second signatures during tx serialization. Defalut to True. Returns : hex - signature.","title":"getSignature"},{"location":"ark/#getsignaturefrombytes","text":"getSignatureFromBytes(data, privateKey) Generate signature from data using private key. Arguments : data bytes - bytes sequence. privateKey str - private key as hex string. Returns : hex - signature.","title":"getSignatureFromBytes"},{"location":"ark/#verifysignature","text":"verifySignature(value, publicKey, signature) Verify signature. Arguments : value str - value as hex string. publicKey str - public key as hex string. signature str - signature as hex string. Returns : bool - True if signature matches the public key.","title":"verifySignature"},{"location":"ark/#verifysignaturefrombytes","text":"verifySignatureFromBytes(data, publicKey, signature) Verify signature. Arguments : data bytes - data. publicKey str - public key as hex string. signature str - signature as hex string. Returns : bool - True if signature matches the public key.","title":"verifySignatureFromBytes"},{"location":"ark/#getid","text":"getId(tx) Generate transaction id. Arguments : tx dict or Transaction - transaction object. Returns : hex - id.","title":"getId"},{"location":"ark/#getidfrombytes","text":"getIdFromBytes(data) Generate data id. Arguments : data bytes - data as bytes sequence. Returns : hex - id.","title":"getIdFromBytes"},{"location":"ark/#getbytes","text":"getBytes(tx, **options) Hash transaction. Arguments : tx dict or Transaction - transaction object. Options : exclude_sig bool - exclude signature during tx serialization. Defalut to True. exclude_multi_sig bool - exclude signatures during tx serialization. Defalut to True. exclude_second_sig bool - exclude second signatures during tx serialization. Defalut to True. Returns : bytes - transaction serial.","title":"getBytes"},{"location":"ark/#checktransaction","text":"checkTransaction(tx, secondPublicKey=None, multiPublicKeys=[]) Verify transaction validity. Arguments : tx dict or Transaction - transaction object. secondPublicKey str - second public key to use if needed. multiPublicKeys list - owners public keys (sorted according to associated type-4-tx asset). Returns : bool - True if transaction is valid.","title":"checkTransaction"},{"location":"ark/#dposlibarktx","text":"","title":"dposlib.ark.tx"},{"location":"ark/#transaction-objects","text":"class Transaction(dict) A python dict that implements all the necessities to manually generate valid transactions.","title":"Transaction Objects"},{"location":"ark/#feeincluded","text":"If True then amount + fee = total arktoshi flow","title":"feeIncluded"},{"location":"ark/#usedynamicfee","text":"| @staticmethod | useDynamicFee(value=\"minFee\") Activate and configure dynamic fees parameters. Value can be either an integer defining the fee multiplier constant or a string defining the fee level to use acccording to the 30-days-average. possible values are avgFee minFee (default) and maxFee . Arguments : value str or int - constant or fee multiplier.","title":"useDynamicFee"},{"location":"ark/#link_1","text":"| link(secret=None, secondSecret=None) Save public and private keys derived from secrets. This is equivalent to wallet login. it limits number of secret keyboard entries. Arguments : secret str - passphrase. secondSecret str - second passphrase.","title":"link"},{"location":"ark/#sign","text":"| sign() Generate the signature field. Private key have to be set first.","title":"sign"},{"location":"ark/#signsign","text":"| signSign() Generate the signSignature field. Transaction have to be signed and second private key have to be set first.","title":"signSign"},{"location":"ark/#signwithsecret","text":"| signWithSecret(secret) Generate the signature field using passphrase. The associated public and private keys are stored till dposlib.ark.unlink is called. Arguments : secret str - passphrase.","title":"signWithSecret"},{"location":"ark/#signsignwithsecondsecret","text":"| signSignWithSecondSecret(secondSecret) Generate the signSignature field using second passphrase. The associated second public and private keys are stored till dposlib.ark.unlink is called. Arguments : secondSecret str - second passphrase.","title":"signSignWithSecondSecret"},{"location":"ark/#multisignwithsecret","text":"| multiSignWithSecret(secret) Add a signature in signatures field. Arguments : index int - signature index. secret str - passphrase.","title":"multiSignWithSecret"},{"location":"ark/#signwithkeys","text":"| signWithKeys(publicKey, privateKey) Generate the signature field using public and private keys. They are stored till dposlib.ark.unlink is called. Arguments : publicKey str - public key as hex string. privateKey str - private key as hex string.","title":"signWithKeys"},{"location":"ark/#signsignwithkey","text":"| signSignWithKey(secondPrivateKey) Generate the signSignature field using second private key. It is stored till dposlib.ark.unlink is called. Arguments : secondPrivateKey str - second private key as hex string.","title":"signSignWithKey"},{"location":"ark/#multisignwithkey","text":"| multiSignWithKey(privateKey) Add a signature in signatures field according to given index and privateKey. Arguments : privateKey str - private key as hex string.","title":"multiSignWithKey"},{"location":"ark/#identify","text":"| identify() Generate the id field. Transaction have to be signed.","title":"identify"},{"location":"ark/#finalize","text":"| finalize(secret=None, secondSecret=None, fee=None, fee_included=False) Finalize a transaction by setting fee , signatures and id . Arguments : secret str - passphrase. secondSecret str - second passphrase. fee int - manually set fee value in arktoshi . fee_included bool - see dposlib.ark.tx.Transaction.feeIncluded .","title":"finalize"},{"location":"ldgr/","text":"dposlib.ark.ldgr This module contains functions to interoperate with Ledger hard wallet. parseBip44Path parseBip44Path(path) Parse a BIP44 derivation path. Arguments : path str - the derivation path. Returns : bytes - parsed bip44 path. getPublicKey getPublicKey(path=None, debug=False) Compute the public key associated to a derivation path. Arguments : path str - derivation path. debug bool - flag to activate debug messages from ledger key. Returns : hex - secp256k1-compressed publicKey. signMessage signMessage(msg, path=None, schnorr=True, debug=False) Compute schnorr or ecdsa signature of msg according to derivation path. Arguments : msg str or bytes - transaction as dictionary. path str - derivation path. schnorr bool - use schnorr signature if True else ecdsa. debug bool - flag to activate debug messages from ledger key. Returns : hex - message signature. signTransaction signTransaction(tx, path=None, schnorr=True, debug=False) Append sender public key and signature into transaction according to derivation path. Arguments : tx dposlib.ark.tx.Transaction - transaction. path str - derivation path. schnorr bool - use schnorr signature if True else ecdsa. debug bool - flag to activate debug messages from ledger key. Returns : hex - transaction signature. Signature is also added to transaction object as signature item.","title":"Ledger"},{"location":"ldgr/#dposlibarkldgr","text":"This module contains functions to interoperate with Ledger hard wallet.","title":"dposlib.ark.ldgr"},{"location":"ldgr/#parsebip44path","text":"parseBip44Path(path) Parse a BIP44 derivation path. Arguments : path str - the derivation path. Returns : bytes - parsed bip44 path.","title":"parseBip44Path"},{"location":"ldgr/#getpublickey","text":"getPublicKey(path=None, debug=False) Compute the public key associated to a derivation path. Arguments : path str - derivation path. debug bool - flag to activate debug messages from ledger key. Returns : hex - secp256k1-compressed publicKey.","title":"getPublicKey"},{"location":"ldgr/#signmessage","text":"signMessage(msg, path=None, schnorr=True, debug=False) Compute schnorr or ecdsa signature of msg according to derivation path. Arguments : msg str or bytes - transaction as dictionary. path str - derivation path. schnorr bool - use schnorr signature if True else ecdsa. debug bool - flag to activate debug messages from ledger key. Returns : hex - message signature.","title":"signMessage"},{"location":"ldgr/#signtransaction","text":"signTransaction(tx, path=None, schnorr=True, debug=False) Append sender public key and signature into transaction according to derivation path. Arguments : tx dposlib.ark.tx.Transaction - transaction. path str - derivation path. schnorr bool - use schnorr signature if True else ecdsa. debug bool - flag to activate debug messages from ledger key. Returns : hex - transaction signature. Signature is also added to transaction object as signature item.","title":"signTransaction"},{"location":"rest/","text":"dposlib.rest rest module provides network loaders and usrv.req.EndPoint root class to implement GET , POST , PUT and DELETE HTTP requests. See Ark API documentation to see how to use http calls. >>> from dposlib import rest >>> rest.use(\"ark\") True >>> # reach http://api.ark.io/api/delegates/arky endpoint using GET >>> # HTTP request builder >>> rest.GET.api.delegates.arky()[\"username\"] 'arky' core module When ark blockchain package is loaded, a core module containing transaction builders, cryptographic and network interface is available. >>> import dposlib >>> dlgt = dposlib.core.api.Delegate(\"arky\") >>> dlgt.forged {u'rewards': 397594.0, u'total': 401908.71166083, u'fees': 4314.71166083} >>> dposlib.core.crypto.getKeys(\"secret\")[\"publicKey\"] '03a02b9d5fdd1307c2ee4652ba54d492d1fd11a7d1bb3f3a44c4a05e79f19de933' >>> dposlib.core.transfer( ... 1, \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", ... u\"\\u2728 simple transfer vendorField\" ... ) { \"amount\": 100000000, \"asset\": {}, \"recipientId\": \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", \"type\": 0, \"vendorField\": \"\\u2728 simple transfer vendorField\", \"version\": 1 } >>> dposlib.core.htlcLock( ... 1, \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", ... \"my secret lock\", expiration=12, ... vendorField=u\"\\u2728 simple htlcLock vendorField\" ... ) { \"amount\": 100000000, \"asset\": { \"lock\": { \"secretHash\": \"dbaed2f2747c7aa5a834b082ccb2b648648758a98d1a415b2ed9a22fd29d47cb\", \"expiration\": { \"type\": 1, \"value\": 82567745 } } }, \"network\": 23, \"recipientId\": \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", \"type\": 8, \"typeGroup\": 1, \"vendorField\": \"\\u2728 simple htlcLock vendorField\", \"version\": 2 } GET HTTP GET request builder POST HTTP POST request builder PUT HTTP PUT request builder DELETE HTTP DELETE request builder load load(name) Load a given blockchain package as dposlib.core module. A valid blockchain package must provide init(peer=None) and stop() definitions. Available blockchains are referenced in dposli.net module. Arguments : name str - package name to load. Raises : Exception - if package name is not found or if package can not be initialized properly. use use(network, **kwargs) Sets the blockchain parameters in the dposlib.rest.cfg module and initializes blockchain package. Network options can be created or overriden using **kwargs argument. Arguments : network str - network to initialize. **kwargs - parameters to be overriden. Returns : bool - True if network connection established, False otherwise. Raises : Exception - if blockchain not defined or if initialization failed.","title":"Network"},{"location":"rest/#dposlibrest","text":"rest module provides network loaders and usrv.req.EndPoint root class to implement GET , POST , PUT and DELETE HTTP requests. See Ark API documentation to see how to use http calls. >>> from dposlib import rest >>> rest.use(\"ark\") True >>> # reach http://api.ark.io/api/delegates/arky endpoint using GET >>> # HTTP request builder >>> rest.GET.api.delegates.arky()[\"username\"] 'arky' core module When ark blockchain package is loaded, a core module containing transaction builders, cryptographic and network interface is available. >>> import dposlib >>> dlgt = dposlib.core.api.Delegate(\"arky\") >>> dlgt.forged {u'rewards': 397594.0, u'total': 401908.71166083, u'fees': 4314.71166083} >>> dposlib.core.crypto.getKeys(\"secret\")[\"publicKey\"] '03a02b9d5fdd1307c2ee4652ba54d492d1fd11a7d1bb3f3a44c4a05e79f19de933' >>> dposlib.core.transfer( ... 1, \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", ... u\"\\u2728 simple transfer vendorField\" ... ) { \"amount\": 100000000, \"asset\": {}, \"recipientId\": \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", \"type\": 0, \"vendorField\": \"\\u2728 simple transfer vendorField\", \"version\": 1 } >>> dposlib.core.htlcLock( ... 1, \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", ... \"my secret lock\", expiration=12, ... vendorField=u\"\\u2728 simple htlcLock vendorField\" ... ) { \"amount\": 100000000, \"asset\": { \"lock\": { \"secretHash\": \"dbaed2f2747c7aa5a834b082ccb2b648648758a98d1a415b2ed9a22fd29d47cb\", \"expiration\": { \"type\": 1, \"value\": 82567745 } } }, \"network\": 23, \"recipientId\": \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", \"type\": 8, \"typeGroup\": 1, \"vendorField\": \"\\u2728 simple htlcLock vendorField\", \"version\": 2 }","title":"dposlib.rest"},{"location":"rest/#get","text":"HTTP GET request builder","title":"GET"},{"location":"rest/#post","text":"HTTP POST request builder","title":"POST"},{"location":"rest/#put","text":"HTTP PUT request builder","title":"PUT"},{"location":"rest/#delete","text":"HTTP DELETE request builder","title":"DELETE"},{"location":"rest/#load","text":"load(name) Load a given blockchain package as dposlib.core module. A valid blockchain package must provide init(peer=None) and stop() definitions. Available blockchains are referenced in dposli.net module. Arguments : name str - package name to load. Raises : Exception - if package name is not found or if package can not be initialized properly.","title":"load"},{"location":"rest/#use","text":"use(network, **kwargs) Sets the blockchain parameters in the dposlib.rest.cfg module and initializes blockchain package. Network options can be created or overriden using **kwargs argument. Arguments : network str - network to initialize. **kwargs - parameters to be overriden. Returns : bool - True if network connection established, False otherwise. Raises : Exception - if blockchain not defined or if initialization failed.","title":"use"},{"location":"v2/","text":"dposlib.ark.v2.api Wallet Objects class Wallet(dposlib.ark.Wallet) sendIpfs | @dposlib.ark.isLinked | sendIpfs(ipfs) See dposlib.ark.v2.registerIpfs . multiSend | @dposlib.ark.isLinked | multiSend(*pairs, **kwargs) See dposlib.ark.v2.multiPayment . resignate | @dposlib.ark.isLinked | resignate() See dposlib.ark.v2.delegateResignation . sendHtlc | @dposlib.ark.isLinked | sendHtlc(amount, address, secret, expiration=24, vendorField=None) See dposlib.ark.v2.htlcLock . claimHtlc | @dposlib.ark.isLinked | claimHtlc(txid, secret) See dposlib.ark.v2.htlcClaim . refundHtlc | @dposlib.ark.isLinked | refundHtlc(txid) See dposlib.ark.v2.htlcRefund . dposlib.ark.v2.builders transfer transfer(amount, address, vendorField=None, expiration=0) Build a transfer transaction. Emoji can be included in transaction vendorField using unicode formating. >>> vendorField = u\"message with sparkles \\u2728\" Arguments : amount float - transaction amount in ark. address str - valid recipient address. vendorField str - vendor field message. expiration float - time of persistance in hour. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. registerSecondSecret registerSecondSecret(secondSecret) Build a second secret registration transaction. Arguments : secondSecret str - passphrase. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. registerSecondPublicKey registerSecondPublicKey(secondPublicKey) Build a second secret registration transaction. You must own the secret issuing secondPublicKey Arguments : secondPublicKey str - public key as hex string. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. registerAsDelegate registerAsDelegate(username) Build a delegate registration transaction. Arguments : username str - delegate username. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. upVote upVote(*usernames) Build an upvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. downVote downVote(*usernames) Build a downvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. registerMultiSignature registerMultiSignature(minSig, *publicKeys) Build a multisignature registration transaction. Arguments : minSig int - minimum signature required. publicKeys list of str - public key list. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. registerIpfs registerIpfs(ipfs) Build an IPFS registration transaction. Arguments : ipfs str - ipfs DAG. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. multiPayment multiPayment(*pairs, **kwargs) Build multi-payment transaction. Emoji can be included in transaction vendorField using unicode formating. >>> u\"message with sparkles \\u2728\" Arguments : pairs iterable - recipient-amount pair iterable. vendorField str - vendor field message. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. delegateResignation delegateResignation() Build a delegate resignation transaction. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. htlcSecret htlcSecret(secret) Compute an HTLC secret hex string from passphrase. Arguments : secret str - passphrase. Returns : hex str: HTLC secret. htlcLock htlcLock(amount, address, secret, expiration=24, vendorField=None) Build an HTLC lock transaction. Emoji can be included in transaction vendorField using unicode formating. >>> vendorField = u\"message with sparkles \\u2728\" Arguments : amount float - transaction amount in ark. address str - valid recipient address. secret str - lock passphrase. expiration float - transaction validity in hour. vendorField str - vendor field message. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. htlcClaim htlcClaim(txid, secret) Build an HTLC claim transaction. Arguments : txid str - htlc lock transaction id. secret str - passphrase used by htlc lock transaction. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. htlcRefund htlcRefund(txid) Build an HTLC refund transaction. Arguments : txid str - htlc lock transaction id. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"Core v2"},{"location":"v2/#dposlibarkv2api","text":"","title":"dposlib.ark.v2.api"},{"location":"v2/#wallet-objects","text":"class Wallet(dposlib.ark.Wallet)","title":"Wallet Objects"},{"location":"v2/#sendipfs","text":"| @dposlib.ark.isLinked | sendIpfs(ipfs) See dposlib.ark.v2.registerIpfs .","title":"sendIpfs"},{"location":"v2/#multisend","text":"| @dposlib.ark.isLinked | multiSend(*pairs, **kwargs) See dposlib.ark.v2.multiPayment .","title":"multiSend"},{"location":"v2/#resignate","text":"| @dposlib.ark.isLinked | resignate() See dposlib.ark.v2.delegateResignation .","title":"resignate"},{"location":"v2/#sendhtlc","text":"| @dposlib.ark.isLinked | sendHtlc(amount, address, secret, expiration=24, vendorField=None) See dposlib.ark.v2.htlcLock .","title":"sendHtlc"},{"location":"v2/#claimhtlc","text":"| @dposlib.ark.isLinked | claimHtlc(txid, secret) See dposlib.ark.v2.htlcClaim .","title":"claimHtlc"},{"location":"v2/#refundhtlc","text":"| @dposlib.ark.isLinked | refundHtlc(txid) See dposlib.ark.v2.htlcRefund .","title":"refundHtlc"},{"location":"v2/#dposlibarkv2builders","text":"","title":"dposlib.ark.v2.builders"},{"location":"v2/#transfer","text":"transfer(amount, address, vendorField=None, expiration=0) Build a transfer transaction. Emoji can be included in transaction vendorField using unicode formating. >>> vendorField = u\"message with sparkles \\u2728\" Arguments : amount float - transaction amount in ark. address str - valid recipient address. vendorField str - vendor field message. expiration float - time of persistance in hour. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"transfer"},{"location":"v2/#registersecondsecret","text":"registerSecondSecret(secondSecret) Build a second secret registration transaction. Arguments : secondSecret str - passphrase. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"registerSecondSecret"},{"location":"v2/#registersecondpublickey","text":"registerSecondPublicKey(secondPublicKey) Build a second secret registration transaction. You must own the secret issuing secondPublicKey Arguments : secondPublicKey str - public key as hex string. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"registerSecondPublicKey"},{"location":"v2/#registerasdelegate","text":"registerAsDelegate(username) Build a delegate registration transaction. Arguments : username str - delegate username. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"registerAsDelegate"},{"location":"v2/#upvote","text":"upVote(*usernames) Build an upvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"upVote"},{"location":"v2/#downvote","text":"downVote(*usernames) Build a downvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"downVote"},{"location":"v2/#registermultisignature","text":"registerMultiSignature(minSig, *publicKeys) Build a multisignature registration transaction. Arguments : minSig int - minimum signature required. publicKeys list of str - public key list. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"registerMultiSignature"},{"location":"v2/#registeripfs","text":"registerIpfs(ipfs) Build an IPFS registration transaction. Arguments : ipfs str - ipfs DAG. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"registerIpfs"},{"location":"v2/#multipayment","text":"multiPayment(*pairs, **kwargs) Build multi-payment transaction. Emoji can be included in transaction vendorField using unicode formating. >>> u\"message with sparkles \\u2728\" Arguments : pairs iterable - recipient-amount pair iterable. vendorField str - vendor field message. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"multiPayment"},{"location":"v2/#delegateresignation","text":"delegateResignation() Build a delegate resignation transaction. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"delegateResignation"},{"location":"v2/#htlcsecret","text":"htlcSecret(secret) Compute an HTLC secret hex string from passphrase. Arguments : secret str - passphrase. Returns : hex str: HTLC secret.","title":"htlcSecret"},{"location":"v2/#htlclock","text":"htlcLock(amount, address, secret, expiration=24, vendorField=None) Build an HTLC lock transaction. Emoji can be included in transaction vendorField using unicode formating. >>> vendorField = u\"message with sparkles \\u2728\" Arguments : amount float - transaction amount in ark. address str - valid recipient address. secret str - lock passphrase. expiration float - transaction validity in hour. vendorField str - vendor field message. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"htlcLock"},{"location":"v2/#htlcclaim","text":"htlcClaim(txid, secret) Build an HTLC claim transaction. Arguments : txid str - htlc lock transaction id. secret str - passphrase used by htlc lock transaction. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"htlcClaim"},{"location":"v2/#htlcrefund","text":"htlcRefund(txid) Build an HTLC refund transaction. Arguments : txid str - htlc lock transaction id. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"htlcRefund"},{"location":"v3/","text":"dposlib.ark.v3.api Wallet Objects class Wallet(Wallet) upVote | @dposlib.ark.isLinked | upVote(*usernames) See dposlib.ark.v3.multiVote . createEntity | @dposlib.ark.isLinked | createEntity(name, type=\"business\", subtype=0, ipfsData=None) See dposlib.ark.v3.entityRegister . updateEntity | @dposlib.ark.isLinked | updateEntity(registrationId, ipfsData, name=None) See dposlib.ark.v3.entityUpdate . resignEntity | @dposlib.ark.isLinked | resignEntity(registrationId) See dposlib.ark.v3.entityResign . dposlib.ark.v3.builders entityRegister entityRegister(name, type=\"business\", subtype=0, ipfsData=None) Build an entity registration. Arguments : name str - entity name type str - entity type subtype int - entity subtype ipfsData dict - ipfs data. Default to None. Returns : dposlib.blockchain.tx.Transaction - orphan transaction. entityUpdate entityUpdate(registrationId, ipfsData, name=None) Build an entity update. Arguments : registrationId str - registration id ipfsData dict - ipfs data name str, optional - entity name Returns : dposlib.blockchain.tx.Transaction - orphan transaction. entityResign entityResign(registrationId) Build an entity resignation. Arguments : registrationId str - registration id Returns : dposlib.blockchain.tx.Transaction - orphan transaction. multiVote multiVote(tx) Transform an dposlib.ark.v2.builders.upVote transaction into a multivote one. It makes the transaction downvote former delegate if any and then apply new vote.","title":"Core v3"},{"location":"v3/#dposlibarkv3api","text":"","title":"dposlib.ark.v3.api"},{"location":"v3/#wallet-objects","text":"class Wallet(Wallet)","title":"Wallet Objects"},{"location":"v3/#upvote","text":"| @dposlib.ark.isLinked | upVote(*usernames) See dposlib.ark.v3.multiVote .","title":"upVote"},{"location":"v3/#createentity","text":"| @dposlib.ark.isLinked | createEntity(name, type=\"business\", subtype=0, ipfsData=None) See dposlib.ark.v3.entityRegister .","title":"createEntity"},{"location":"v3/#updateentity","text":"| @dposlib.ark.isLinked | updateEntity(registrationId, ipfsData, name=None) See dposlib.ark.v3.entityUpdate .","title":"updateEntity"},{"location":"v3/#resignentity","text":"| @dposlib.ark.isLinked | resignEntity(registrationId) See dposlib.ark.v3.entityResign .","title":"resignEntity"},{"location":"v3/#dposlibarkv3builders","text":"","title":"dposlib.ark.v3.builders"},{"location":"v3/#entityregister","text":"entityRegister(name, type=\"business\", subtype=0, ipfsData=None) Build an entity registration. Arguments : name str - entity name type str - entity type subtype int - entity subtype ipfsData dict - ipfs data. Default to None. Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"entityRegister"},{"location":"v3/#entityupdate","text":"entityUpdate(registrationId, ipfsData, name=None) Build an entity update. Arguments : registrationId str - registration id ipfsData dict - ipfs data name str, optional - entity name Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"entityUpdate"},{"location":"v3/#entityresign","text":"entityResign(registrationId) Build an entity resignation. Arguments : registrationId str - registration id Returns : dposlib.blockchain.tx.Transaction - orphan transaction.","title":"entityResign"},{"location":"v3/#multivote","text":"multiVote(tx) Transform an dposlib.ark.v2.builders.upVote transaction into a multivote one. It makes the transaction downvote former delegate if any and then apply new vote.","title":"multiVote"}]}