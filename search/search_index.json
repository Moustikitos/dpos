{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dposlib package aims to provide a simplevand unique API to Ark blockchain and its main forks. Available networks Network Ark Solar Compendia mainnet ark sxp nos testnet - tsxp - devnet dark - dnos","title":"Home"},{"location":"#available-networks","text":"Network Ark Solar Compendia mainnet ark sxp nos testnet - tsxp - devnet dark - dnos","title":"Available networks"},{"location":"rest/","text":"dposlib.rest rest module provides network loaders and usrv.req.EndPoint root class to implement GET , POST , PUT and DELETE HTTP requests. When a specific blockchain package is loaded through rest.use definition, a dposlib.core module is available to provide necessary classes and definitions. GET HTTP GET request builder POST HTTP POST request builder PUT HTTP PUT request builder DELETE HTTP DELETE request builder load def load(name) Load a given blockchain package as dposlib.core module. A valid blockchain package must provide init(peer=None) and stop() definitions. Available blockchains are referenced in dposli.net module. Arguments : name str - package name to load. Raises : Exception - if package name is not found or if package can not be initialized properly. use def use(network, **kwargs) Sets the blockchain parameters in the dposlib.rest.cfg module and initializes blockchain package. Network options can be created or overriden using **kwargs argument. Arguments : network str - network to initialize. **kwargs - parameters to be overriden. Returns : bool - True if network connection established, False otherwise. Raises : Exception - if blockchain not defined or if initialization failed.","title":"Network"},{"location":"rest/#dposlibrest","text":"rest module provides network loaders and usrv.req.EndPoint root class to implement GET , POST , PUT and DELETE HTTP requests. When a specific blockchain package is loaded through rest.use definition, a dposlib.core module is available to provide necessary classes and definitions.","title":"dposlib.rest"},{"location":"rest/#get","text":"HTTP GET request builder","title":"GET"},{"location":"rest/#post","text":"HTTP POST request builder","title":"POST"},{"location":"rest/#put","text":"HTTP PUT request builder","title":"PUT"},{"location":"rest/#delete","text":"HTTP DELETE request builder","title":"DELETE"},{"location":"rest/#load","text":"def load(name) Load a given blockchain package as dposlib.core module. A valid blockchain package must provide init(peer=None) and stop() definitions. Available blockchains are referenced in dposli.net module. Arguments : name str - package name to load. Raises : Exception - if package name is not found or if package can not be initialized properly.","title":"load"},{"location":"rest/#use","text":"def use(network, **kwargs) Sets the blockchain parameters in the dposlib.rest.cfg module and initializes blockchain package. Network options can be created or overriden using **kwargs argument. Arguments : network str - network to initialize. **kwargs - parameters to be overriden. Returns : bool - True if network connection established, False otherwise. Raises : Exception - if blockchain not defined or if initialization failed.","title":"use"},{"location":"ark/api/","text":"dposlib.ark.api isLinked def isLinked(func) Python decorator . First argument of decorated function have to be a dposlib.ark.api.Content or an object containing a valid address , _derivationPath or publicKey attribute. It executes the decorated function if the object is correctly linked using dposlib.ark.api.link definition. link def link(cls, secret=None, secondSecret=None) Associates crypto keys into a dposlib.ark.api.Content object according to secrets. If secret or secondSecret are not str , they are considered as None . In this case secrets will be asked and checked from console untill success or Ctrl+c keyboard interruption. Arguments : cls Content - content object. secret str - secret string. Default set to None . secondSecret str - second secret string. Default set to None . Returns : bool - True if secret and second secret match. unlink def unlink(cls) Remove crypto keys association. JSDict Objects class JSDict(dict) Read only dictionary with js object behaviour. >>> jsdic = dposlib.ark.JSDict(value=5) >>> jsdic {'value': 5} >>> jsdic.value 5 Content Objects class Content(object) Live object connected to blockchain. It is initialized with dposlib.rest.GET request. Object is updated every 30s. Endpoint response can be a dict or a list . If it is a list , it is stored in data attribute else all fields are stored as instance attribute. >>> txs = dposlib.ark.Content(rest.GET.api.transactions) >>> txs.data[0][\"timestamp\"] { 'epoch': 121912776, 'unix': 1612013976, 'human': '2021-01-30T13:39:36.000Z' } >>> tx = dposlib.ark.Content( rest.GET.api.transactions, \"d36a164a54df9d1c7889521ece15318d6945e9971fecd0a96a9c18e74e0adbf9\", ) >>> tx.timestamp { 'epoch': 121919704, 'unix': 1612020904, 'human': '2021-01-30T15:35:04.000Z' } >>> tx.amount 212963052 >>> tx.datetime datetime.datetime(2021, 1, 30, 15, 35, 4, tzinfo=<UTC>) __init__ def __init__(ndpt, *args, **kwargs) Arguments : ndpt usrv.req.Endpoint - endpoint class to be called. *args - Variable length argument list used by usrv.req.Endpoint . Kwargs : keep_alive bool - set hook to update data from blockcahin. Default to True. filter def filter(data) Convert data as JSDict object converting string values in int if possible. Wallet Objects class Wallet(Content) Wallet root class that implements basic wallet behaviour. delegate Delegate attributes if wallet is registered as delegate. username Delegate username if wallet is registered as delegate. secondPublicKey Second public key if second signature is set to wallet. __init__ def __init__(address, **kw) Arguments : address str - wallet address or delegate username. **kwargs - Variable key argument used by dposlib.ark.api.Content . Specific kwargs : keep_alive bool - automatic update data from blockcahin. Default to True. fee int or str - set fee level as fee multiplier string value or one of minFee , avgFee , maxFee . Default to avgFee . fee_included bool - set to True if amout + fee is the total desired out flow. Default to False. link def link(*args, **kwargs) See dposlib.ark.api.link . unlink def unlink() See dposlib.ark.api.unlink . send @isLinked def send(amount, address, vendorField=None, expiration=0) Broadcast a transfer transaction to the ledger. See dposlib.ark.builders.v2.transfer . setSecondSecret @isLinked def setSecondSecret(secondSecret) Broadcast a second secret registration transaction to the ledger. See dposlib.ark.builders.v2.registerSecondSecret . setSecondPublicKey @isLinked def setSecondPublicKey(secondPublicKey) Broadcast a second secret registration transaction into the ledger. See dposlib.ark.builders.v2.registerSecondPublicKey . setDelegate @isLinked def setDelegate(username) Broadcast a delegate registration transaction to the ledger. See dposlib.ark.builders.v2.registerAsDelegate . upVote @isLinked def upVote(*usernames) Broadcast an up-vote transaction to the ledger. See dposlib.ark.builders.v2.multiVote . downVote @isLinked def downVote(*usernames) Broadcast a down-vote transaction to the ledger. See dposlib.ark.builders.v2.downVote . sendIpfs @isLinked def sendIpfs(ipfs) See dposlib.ark.builders.v2.registerIpfs . multiSend @isLinked def multiSend(*pairs, **kwargs) See dposlib.ark.builder.multiPayment . resignate @isLinked def resignate() See dposlib.ark.builders.v2.delegateResignation . sendHtlc @isLinked def sendHtlc(amount, address, secret, expiration=24, vendorField=None) See dposlib.ark.builders.v2.htlcLock . claimHtlc @isLinked def claimHtlc(txid, secret) See dposlib.ark.builders.v2.htlcClaim . refundHtlc @isLinked def refundHtlc(txid) See dposlib.ark.builders.v2.htlcRefund . createEntity @isLinked def createEntity(name, type=\"business\", subtype=0, ipfsData=None) See dposlib.ark.builders.v2.entityRegister . updateEntity @isLinked def updateEntity(registrationId, ipfsData, name=None) See dposlib.ark.builders.v2.entityUpdate . resignEntity @isLinked def resignEntity(registrationId) See dposlib.ark.builders.v2.entityResign . Ledger Objects class Ledger(Wallet) Ledger wallet api. Webhook Objects class Webhook(Content) >>> import dposlib >>> peer = \"http:/127.0.0.1:4004\" >>> target = \"http://127.0.0.1/targetted/endpoint\" >>> wh = dposlib.core.api.Webhook( ... peer, \"transaction.applied\", target, \"amount<1\" ... ) security token: 9f86d081884c7d659a2feaa0c55ad015...2b0b822cd15d6c15b0f00a08 >>> dposlib.core.api.webhook.verify(\"9f86d081884c7d659a2feaa0c55ad015\") True >>> wh.delete() {\"sucess\": True, \"status\": 204} condition @staticmethod def condition(expr) Webhook condition builder from str expression. It is internally used by Webhook.create method. td,th{border:none!important;text-align:left;} webhook dposlib lt / lte < / <= gt / gte > / >= eq / ne == / != truthy / falsy ? / !? regexp / contains \\\\ / $ between / not-between <> / !<> >>> import dposlib.ark.api as api >>> api.Webhook.condition(\"vendorField\\\\^.*payroll.*$\") {'value': '^.*payroll.*$', 'key': 'vendorField', 'condition': 'regexp'} >>> api.Webhook.condition(\"amount<>2000000000000:4000000000000\") { 'value': {'min': '2000000000000', 'max': '4000000000000'}, 'condition': 'between', 'key': 'amount' } Arguments : expr str - human readable expression. Returns : dict - webhook conditions","title":"API"},{"location":"ark/api/#dposlibarkapi","text":"","title":"dposlib.ark.api"},{"location":"ark/api/#islinked","text":"def isLinked(func) Python decorator . First argument of decorated function have to be a dposlib.ark.api.Content or an object containing a valid address , _derivationPath or publicKey attribute. It executes the decorated function if the object is correctly linked using dposlib.ark.api.link definition.","title":"isLinked"},{"location":"ark/api/#link","text":"def link(cls, secret=None, secondSecret=None) Associates crypto keys into a dposlib.ark.api.Content object according to secrets. If secret or secondSecret are not str , they are considered as None . In this case secrets will be asked and checked from console untill success or Ctrl+c keyboard interruption. Arguments : cls Content - content object. secret str - secret string. Default set to None . secondSecret str - second secret string. Default set to None . Returns : bool - True if secret and second secret match.","title":"link"},{"location":"ark/api/#unlink","text":"def unlink(cls) Remove crypto keys association.","title":"unlink"},{"location":"ark/api/#jsdict-objects","text":"class JSDict(dict) Read only dictionary with js object behaviour. >>> jsdic = dposlib.ark.JSDict(value=5) >>> jsdic {'value': 5} >>> jsdic.value 5","title":"JSDict Objects"},{"location":"ark/api/#content-objects","text":"class Content(object) Live object connected to blockchain. It is initialized with dposlib.rest.GET request. Object is updated every 30s. Endpoint response can be a dict or a list . If it is a list , it is stored in data attribute else all fields are stored as instance attribute. >>> txs = dposlib.ark.Content(rest.GET.api.transactions) >>> txs.data[0][\"timestamp\"] { 'epoch': 121912776, 'unix': 1612013976, 'human': '2021-01-30T13:39:36.000Z' } >>> tx = dposlib.ark.Content( rest.GET.api.transactions, \"d36a164a54df9d1c7889521ece15318d6945e9971fecd0a96a9c18e74e0adbf9\", ) >>> tx.timestamp { 'epoch': 121919704, 'unix': 1612020904, 'human': '2021-01-30T15:35:04.000Z' } >>> tx.amount 212963052 >>> tx.datetime datetime.datetime(2021, 1, 30, 15, 35, 4, tzinfo=<UTC>)","title":"Content Objects"},{"location":"ark/api/#__init__","text":"def __init__(ndpt, *args, **kwargs) Arguments : ndpt usrv.req.Endpoint - endpoint class to be called. *args - Variable length argument list used by usrv.req.Endpoint . Kwargs : keep_alive bool - set hook to update data from blockcahin. Default to True.","title":"__init__"},{"location":"ark/api/#filter","text":"def filter(data) Convert data as JSDict object converting string values in int if possible.","title":"filter"},{"location":"ark/api/#wallet-objects","text":"class Wallet(Content) Wallet root class that implements basic wallet behaviour.","title":"Wallet Objects"},{"location":"ark/api/#delegate","text":"Delegate attributes if wallet is registered as delegate.","title":"delegate"},{"location":"ark/api/#username","text":"Delegate username if wallet is registered as delegate.","title":"username"},{"location":"ark/api/#secondpublickey","text":"Second public key if second signature is set to wallet.","title":"secondPublicKey"},{"location":"ark/api/#__init___1","text":"def __init__(address, **kw) Arguments : address str - wallet address or delegate username. **kwargs - Variable key argument used by dposlib.ark.api.Content . Specific kwargs : keep_alive bool - automatic update data from blockcahin. Default to True. fee int or str - set fee level as fee multiplier string value or one of minFee , avgFee , maxFee . Default to avgFee . fee_included bool - set to True if amout + fee is the total desired out flow. Default to False.","title":"__init__"},{"location":"ark/api/#link_1","text":"def link(*args, **kwargs) See dposlib.ark.api.link .","title":"link"},{"location":"ark/api/#unlink_1","text":"def unlink() See dposlib.ark.api.unlink .","title":"unlink"},{"location":"ark/api/#send","text":"@isLinked def send(amount, address, vendorField=None, expiration=0) Broadcast a transfer transaction to the ledger. See dposlib.ark.builders.v2.transfer .","title":"send"},{"location":"ark/api/#setsecondsecret","text":"@isLinked def setSecondSecret(secondSecret) Broadcast a second secret registration transaction to the ledger. See dposlib.ark.builders.v2.registerSecondSecret .","title":"setSecondSecret"},{"location":"ark/api/#setsecondpublickey","text":"@isLinked def setSecondPublicKey(secondPublicKey) Broadcast a second secret registration transaction into the ledger. See dposlib.ark.builders.v2.registerSecondPublicKey .","title":"setSecondPublicKey"},{"location":"ark/api/#setdelegate","text":"@isLinked def setDelegate(username) Broadcast a delegate registration transaction to the ledger. See dposlib.ark.builders.v2.registerAsDelegate .","title":"setDelegate"},{"location":"ark/api/#upvote","text":"@isLinked def upVote(*usernames) Broadcast an up-vote transaction to the ledger. See dposlib.ark.builders.v2.multiVote .","title":"upVote"},{"location":"ark/api/#downvote","text":"@isLinked def downVote(*usernames) Broadcast a down-vote transaction to the ledger. See dposlib.ark.builders.v2.downVote .","title":"downVote"},{"location":"ark/api/#sendipfs","text":"@isLinked def sendIpfs(ipfs) See dposlib.ark.builders.v2.registerIpfs .","title":"sendIpfs"},{"location":"ark/api/#multisend","text":"@isLinked def multiSend(*pairs, **kwargs) See dposlib.ark.builder.multiPayment .","title":"multiSend"},{"location":"ark/api/#resignate","text":"@isLinked def resignate() See dposlib.ark.builders.v2.delegateResignation .","title":"resignate"},{"location":"ark/api/#sendhtlc","text":"@isLinked def sendHtlc(amount, address, secret, expiration=24, vendorField=None) See dposlib.ark.builders.v2.htlcLock .","title":"sendHtlc"},{"location":"ark/api/#claimhtlc","text":"@isLinked def claimHtlc(txid, secret) See dposlib.ark.builders.v2.htlcClaim .","title":"claimHtlc"},{"location":"ark/api/#refundhtlc","text":"@isLinked def refundHtlc(txid) See dposlib.ark.builders.v2.htlcRefund .","title":"refundHtlc"},{"location":"ark/api/#createentity","text":"@isLinked def createEntity(name, type=\"business\", subtype=0, ipfsData=None) See dposlib.ark.builders.v2.entityRegister .","title":"createEntity"},{"location":"ark/api/#updateentity","text":"@isLinked def updateEntity(registrationId, ipfsData, name=None) See dposlib.ark.builders.v2.entityUpdate .","title":"updateEntity"},{"location":"ark/api/#resignentity","text":"@isLinked def resignEntity(registrationId) See dposlib.ark.builders.v2.entityResign .","title":"resignEntity"},{"location":"ark/api/#ledger-objects","text":"class Ledger(Wallet) Ledger wallet api.","title":"Ledger Objects"},{"location":"ark/api/#webhook-objects","text":"class Webhook(Content) >>> import dposlib >>> peer = \"http:/127.0.0.1:4004\" >>> target = \"http://127.0.0.1/targetted/endpoint\" >>> wh = dposlib.core.api.Webhook( ... peer, \"transaction.applied\", target, \"amount<1\" ... ) security token: 9f86d081884c7d659a2feaa0c55ad015...2b0b822cd15d6c15b0f00a08 >>> dposlib.core.api.webhook.verify(\"9f86d081884c7d659a2feaa0c55ad015\") True >>> wh.delete() {\"sucess\": True, \"status\": 204}","title":"Webhook Objects"},{"location":"ark/api/#condition","text":"@staticmethod def condition(expr) Webhook condition builder from str expression. It is internally used by Webhook.create method. td,th{border:none!important;text-align:left;} webhook dposlib lt / lte < / <= gt / gte > / >= eq / ne == / != truthy / falsy ? / !? regexp / contains \\\\ / $ between / not-between <> / !<> >>> import dposlib.ark.api as api >>> api.Webhook.condition(\"vendorField\\\\^.*payroll.*$\") {'value': '^.*payroll.*$', 'key': 'vendorField', 'condition': 'regexp'} >>> api.Webhook.condition(\"amount<>2000000000000:4000000000000\") { 'value': {'min': '2000000000000', 'max': '4000000000000'}, 'condition': 'between', 'key': 'amount' } Arguments : expr str - human readable expression. Returns : dict - webhook conditions","title":"condition"},{"location":"ark/ark/","text":"dposlib.ark ARK.io specific package. See Ark API documentation to see how to use http calls. >>> import dposlib >>> from dposlib import rest >>> rest.use(\"ark\") True >>> # reach http://api.ark.io/api/delegates/arky endpoint using GET >>> # HTTP request builder >>> rest.GET.api.delegates.arky()[\"username\"] 'arky' >>> dlgt = dposlib.core.api.Delegate(\"arky\") >>> dlgt.forged {u'rewards': 397594.0, u'total': 401908.71166083, u'fees': 4314.71166083} >>> dposlib.core.crypto.getKeys(\"secret\")[\"publicKey\"] '03a02b9d5fdd1307c2ee4652ba54d492d1fd11a7d1bb3f3a44c4a05e79f19de933' >>> dposlib.core.transfer( ... 1, \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", ... u\"\\u2728 simple transfer vendorField\" ... ) { \"amount\": 100000000, \"asset\": {}, \"recipientId\": \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", \"type\": 0, \"vendorField\": \"\\u2728 simple transfer vendorField\", \"version\": 1 } >>> dposlib.core.htlcLock( ... 1, \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", ... \"my secret lock\", expiration=12, ... vendorField=u\"\\u2728 simple htlcLock vendorField\" ... ) { \"amount\": 100000000, \"asset\": { \"lock\": { \"secretHash\": \"dbaed2f2747c7aa5a834b082ccb2b648648758a98d1a415b2ed9a22fd29d47cb\", \"expiration\": { \"type\": 1, \"value\": 82567745 } } }, \"network\": 23, \"recipientId\": \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", \"type\": 8, \"typeGroup\": 1, \"vendorField\": \"\\u2728 simple htlcLock vendorField\", \"version\": 2 } init def init(seed=None) Blockchain initialisation. It stores root values in cfg module. stop def stop() Stop daemon initialized by init call.","title":"Ark.io"},{"location":"ark/ark/#dposlibark","text":"ARK.io specific package. See Ark API documentation to see how to use http calls. >>> import dposlib >>> from dposlib import rest >>> rest.use(\"ark\") True >>> # reach http://api.ark.io/api/delegates/arky endpoint using GET >>> # HTTP request builder >>> rest.GET.api.delegates.arky()[\"username\"] 'arky' >>> dlgt = dposlib.core.api.Delegate(\"arky\") >>> dlgt.forged {u'rewards': 397594.0, u'total': 401908.71166083, u'fees': 4314.71166083} >>> dposlib.core.crypto.getKeys(\"secret\")[\"publicKey\"] '03a02b9d5fdd1307c2ee4652ba54d492d1fd11a7d1bb3f3a44c4a05e79f19de933' >>> dposlib.core.transfer( ... 1, \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", ... u\"\\u2728 simple transfer vendorField\" ... ) { \"amount\": 100000000, \"asset\": {}, \"recipientId\": \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", \"type\": 0, \"vendorField\": \"\\u2728 simple transfer vendorField\", \"version\": 1 } >>> dposlib.core.htlcLock( ... 1, \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", ... \"my secret lock\", expiration=12, ... vendorField=u\"\\u2728 simple htlcLock vendorField\" ... ) { \"amount\": 100000000, \"asset\": { \"lock\": { \"secretHash\": \"dbaed2f2747c7aa5a834b082ccb2b648648758a98d1a415b2ed9a22fd29d47cb\", \"expiration\": { \"type\": 1, \"value\": 82567745 } } }, \"network\": 23, \"recipientId\": \"ARfDVWZ7Zwkox3ZXtMQQY1HYSANMB88vWE\", \"type\": 8, \"typeGroup\": 1, \"vendorField\": \"\\u2728 simple htlcLock vendorField\", \"version\": 2 }","title":"dposlib.ark"},{"location":"ark/ark/#init","text":"def init(seed=None) Blockchain initialisation. It stores root values in cfg module.","title":"init"},{"location":"ark/ark/#stop","text":"def stop() Stop daemon initialized by init call.","title":"stop"},{"location":"ark/crypto/","text":"dposlib.ark.crypto getKeys def getKeys(secret) Generate keyring containing secp256k1 keys-pair and wallet import format (WIF). Arguments : secret str, bytes or int - anything that could issue a private key on secp256k1 curve. Returns : dict - public, private and WIF keys. getMultiSignaturePublicKey def getMultiSignaturePublicKey(minimum, *publicKeys) Compute ARK multi signature public key according to ARK AIP 18 . Arguments : minimum int - minimum signature required. publicKeys list of str - public key list. Returns : hex - the multisignature public key. getAddressFromSecret def getAddressFromSecret(secret, marker=None) Compute ARK address from secret. Arguments : secret str - secret string. marker int - network marker (optional). Returns : base58 - the address. getAddress def getAddress(publicKey, marker=None) Compute ARK address from publicKey. Arguments : publicKey str - public key. marker int - network marker (optional). Returns : base58 - the address. getWIF def getWIF(seed) Compute WIF address from seed. Arguments : seed bytes - a sha256 sequence bytes. Returns : base58 - the WIF address. wifSignature def wifSignature(tx, wif) Generate transaction signature using private key. Arguments : tx dict or Transaction - transaction description. wif str - wif key. Returns : hex - signature. wifSignatureFromBytes def wifSignatureFromBytes(data, wif) Generate signature from data using WIF key. Arguments : data bytes - bytes sequence. wif str - wif key. Returns : hex - signature. getSignature def getSignature(tx, privateKey, **options) Generate transaction signature using private key. Arguments : tx dict or Transaction - transaction description. privateKey str - private key as hex string. Options : exclude_sig bool - exclude signature during tx serialization. Defalut to True. exclude_multi_sig bool - exclude signatures during tx serialization. Defalut to True. exclude_second_sig bool - exclude second signatures during tx serialization. Defalut to True. Returns : hex - signature. getSignatureFromBytes def getSignatureFromBytes(data, privateKey) Generate signature from data using private key. Arguments : data bytes - bytes sequence. privateKey str - private key as hex string. Returns : hex - signature. verifySignature def verifySignature(value, publicKey, signature) Verify signature. Arguments : value str - value as hex string. publicKey str - public key as hex string. signature str - signature as hex string. Returns : bool - True if signature matches the public key. verifySignatureFromBytes def verifySignatureFromBytes(data, publicKey, signature) Verify signature. Arguments : data bytes - data. publicKey str - public key as hex string. signature str - signature as hex string. Returns : bool - True if signature matches the public key. getId def getId(tx) Generate transaction id. Arguments : tx dict or Transaction - transaction object. Returns : hex - id. getIdFromBytes def getIdFromBytes(data) Generate data id. Arguments : data bytes - data as bytes sequence. Returns : hex - id. getBytes def getBytes(tx, **options) Hash transaction. Arguments : tx dict or Transaction - transaction object. Options : exclude_sig bool - exclude signature during tx serialization. Defalut to False. exclude_multi_sig bool - exclude signatures during tx serialization. Defalut to False. exclude_second_sig bool - exclude second signatures during tx serialization. Defalut to False. Returns : bytes - transaction serial. checkTransaction def checkTransaction(tx, secondPublicKey=None, multiPublicKeys=[]) Verify transaction validity. Arguments : tx dict or Transaction - transaction object. secondPublicKey str - second public key to use if needed. multiPublicKeys list - owners public keys (sorted according to associated type-4-tx asset). Returns : bool - True if transaction is valid.","title":"Cryptography"},{"location":"ark/crypto/#dposlibarkcrypto","text":"","title":"dposlib.ark.crypto"},{"location":"ark/crypto/#getkeys","text":"def getKeys(secret) Generate keyring containing secp256k1 keys-pair and wallet import format (WIF). Arguments : secret str, bytes or int - anything that could issue a private key on secp256k1 curve. Returns : dict - public, private and WIF keys.","title":"getKeys"},{"location":"ark/crypto/#getmultisignaturepublickey","text":"def getMultiSignaturePublicKey(minimum, *publicKeys) Compute ARK multi signature public key according to ARK AIP 18 . Arguments : minimum int - minimum signature required. publicKeys list of str - public key list. Returns : hex - the multisignature public key.","title":"getMultiSignaturePublicKey"},{"location":"ark/crypto/#getaddressfromsecret","text":"def getAddressFromSecret(secret, marker=None) Compute ARK address from secret. Arguments : secret str - secret string. marker int - network marker (optional). Returns : base58 - the address.","title":"getAddressFromSecret"},{"location":"ark/crypto/#getaddress","text":"def getAddress(publicKey, marker=None) Compute ARK address from publicKey. Arguments : publicKey str - public key. marker int - network marker (optional). Returns : base58 - the address.","title":"getAddress"},{"location":"ark/crypto/#getwif","text":"def getWIF(seed) Compute WIF address from seed. Arguments : seed bytes - a sha256 sequence bytes. Returns : base58 - the WIF address.","title":"getWIF"},{"location":"ark/crypto/#wifsignature","text":"def wifSignature(tx, wif) Generate transaction signature using private key. Arguments : tx dict or Transaction - transaction description. wif str - wif key. Returns : hex - signature.","title":"wifSignature"},{"location":"ark/crypto/#wifsignaturefrombytes","text":"def wifSignatureFromBytes(data, wif) Generate signature from data using WIF key. Arguments : data bytes - bytes sequence. wif str - wif key. Returns : hex - signature.","title":"wifSignatureFromBytes"},{"location":"ark/crypto/#getsignature","text":"def getSignature(tx, privateKey, **options) Generate transaction signature using private key. Arguments : tx dict or Transaction - transaction description. privateKey str - private key as hex string. Options : exclude_sig bool - exclude signature during tx serialization. Defalut to True. exclude_multi_sig bool - exclude signatures during tx serialization. Defalut to True. exclude_second_sig bool - exclude second signatures during tx serialization. Defalut to True. Returns : hex - signature.","title":"getSignature"},{"location":"ark/crypto/#getsignaturefrombytes","text":"def getSignatureFromBytes(data, privateKey) Generate signature from data using private key. Arguments : data bytes - bytes sequence. privateKey str - private key as hex string. Returns : hex - signature.","title":"getSignatureFromBytes"},{"location":"ark/crypto/#verifysignature","text":"def verifySignature(value, publicKey, signature) Verify signature. Arguments : value str - value as hex string. publicKey str - public key as hex string. signature str - signature as hex string. Returns : bool - True if signature matches the public key.","title":"verifySignature"},{"location":"ark/crypto/#verifysignaturefrombytes","text":"def verifySignatureFromBytes(data, publicKey, signature) Verify signature. Arguments : data bytes - data. publicKey str - public key as hex string. signature str - signature as hex string. Returns : bool - True if signature matches the public key.","title":"verifySignatureFromBytes"},{"location":"ark/crypto/#getid","text":"def getId(tx) Generate transaction id. Arguments : tx dict or Transaction - transaction object. Returns : hex - id.","title":"getId"},{"location":"ark/crypto/#getidfrombytes","text":"def getIdFromBytes(data) Generate data id. Arguments : data bytes - data as bytes sequence. Returns : hex - id.","title":"getIdFromBytes"},{"location":"ark/crypto/#getbytes","text":"def getBytes(tx, **options) Hash transaction. Arguments : tx dict or Transaction - transaction object. Options : exclude_sig bool - exclude signature during tx serialization. Defalut to False. exclude_multi_sig bool - exclude signatures during tx serialization. Defalut to False. exclude_second_sig bool - exclude second signatures during tx serialization. Defalut to False. Returns : bytes - transaction serial.","title":"getBytes"},{"location":"ark/crypto/#checktransaction","text":"def checkTransaction(tx, secondPublicKey=None, multiPublicKeys=[]) Verify transaction validity. Arguments : tx dict or Transaction - transaction object. secondPublicKey str - second public key to use if needed. multiPublicKeys list - owners public keys (sorted according to associated type-4-tx asset). Returns : bool - True if transaction is valid.","title":"checkTransaction"},{"location":"ark/ldgr/","text":"dposlib.ark.ldgr This module contains functions to interoperate with Ledger hard wallet. parseBip44Path def parseBip44Path(path) Parse a BIP44 derivation path. Arguments : path str - the derivation path. Returns : bytes - parsed bip44 path. getPublicKey def getPublicKey(path=None, debug=False) Compute the public key associated to a derivation path. Arguments : path str - derivation path. debug bool - flag to activate debug messages from ledger key. Returns : hex - secp256k1-compressed publicKey. signMessage def signMessage(msg, path=None, schnorr=True, debug=False) Compute schnorr or ecdsa signature of msg according to derivation path. Arguments : msg str or bytes - message to sign. path str - derivation path. schnorr bool - use schnorr signature if True else ecdsa. debug bool - flag to activate debug messages from ledger key. Returns : hex - message signature. signTransaction def signTransaction(tx, path=None, schnorr=True, debug=False) Append sender public key and signature into transaction according to derivation path. Arguments : tx dposlib.ark.tx.Transaction - transaction. path str - derivation path. schnorr bool - use schnorr signature if True else ecdsa. debug bool - flag to activate debug messages from ledger key. Returns : hex - transaction signature. Signature is also added to transaction object as signature item.","title":"Ledger Wallet"},{"location":"ark/ldgr/#dposlibarkldgr","text":"This module contains functions to interoperate with Ledger hard wallet.","title":"dposlib.ark.ldgr"},{"location":"ark/ldgr/#parsebip44path","text":"def parseBip44Path(path) Parse a BIP44 derivation path. Arguments : path str - the derivation path. Returns : bytes - parsed bip44 path.","title":"parseBip44Path"},{"location":"ark/ldgr/#getpublickey","text":"def getPublicKey(path=None, debug=False) Compute the public key associated to a derivation path. Arguments : path str - derivation path. debug bool - flag to activate debug messages from ledger key. Returns : hex - secp256k1-compressed publicKey.","title":"getPublicKey"},{"location":"ark/ldgr/#signmessage","text":"def signMessage(msg, path=None, schnorr=True, debug=False) Compute schnorr or ecdsa signature of msg according to derivation path. Arguments : msg str or bytes - message to sign. path str - derivation path. schnorr bool - use schnorr signature if True else ecdsa. debug bool - flag to activate debug messages from ledger key. Returns : hex - message signature.","title":"signMessage"},{"location":"ark/ldgr/#signtransaction","text":"def signTransaction(tx, path=None, schnorr=True, debug=False) Append sender public key and signature into transaction according to derivation path. Arguments : tx dposlib.ark.tx.Transaction - transaction. path str - derivation path. schnorr bool - use schnorr signature if True else ecdsa. debug bool - flag to activate debug messages from ledger key. Returns : hex - transaction signature. Signature is also added to transaction object as signature item.","title":"signTransaction"},{"location":"ark/tx/","text":"dposlib.ark.tx serialize def serialize(tx, **options) Serialize transaction. Arguments : tx dict or Transaction - transaction object. Returns : bytes - transaction serial representation. Transaction Objects class Transaction(dict) A python dict that implements all the necessities to manually generate valid transactions. feeIncluded If True then amount + fee = total arktoshi flow useDynamicFee @staticmethod def useDynamicFee(value=\"minFee\") Activate and configure dynamic fees parameters. Value can be either an integer defining the fee multiplier constant or a string defining the fee level to use acccording to the 30-days-average. possible values are avgFee minFee (default) and maxFee . Arguments : value str or int - constant or fee multiplier. link def link(secret=None, secondSecret=None) Save public and private keys derived from secrets. This is equivalent to wallet login. it limits number of secret keyboard entries. Arguments : secret str - passphrase. secondSecret str - second passphrase. sign def sign() Generate the signature field. Private key have to be set first. signSign def signSign() Generate the signSignature field. Transaction have to be signed and second private key have to be set first. signWithSecret def signWithSecret(secret) Generate the signature field using passphrase. The associated public and private keys are stored till dposlib.ark.unlink is called. Arguments : secret str - passphrase. signSignWithSecondSecret def signSignWithSecondSecret(secondSecret) Generate the signSignature field using second passphrase. The associated second public and private keys are stored till dposlib.ark.unlink is called. Arguments : secondSecret str - second passphrase. multiSignWithSecret def multiSignWithSecret(secret) Add a signature in signatures field. Arguments : index int - signature index. secret str - passphrase. signWithKeys def signWithKeys(publicKey, privateKey) Generate the signature field using public and private keys. They are stored till dposlib.ark.unlink is called. Arguments : publicKey str - public key as hex string. privateKey str - private key as hex string. signSignWithKey def signSignWithKey(secondPrivateKey) Generate the signSignature field using second private key. It is stored till dposlib.ark.unlink is called. Arguments : secondPrivateKey str - second private key as hex string. multiSignWithKey def multiSignWithKey(privateKey) Add a signature in signatures field according to given index and privateKey. Arguments : privateKey str - private key as hex string. appendMultiSignature def appendMultiSignature(publicKey, signature) Manage the place of signature in signatures list for multisignature wallet transaction or registration. identify def identify() Generate the id field. Transaction have to be signed. finalize def finalize(secret=None, secondSecret=None, fee=None, fee_included=False) Finalize a transaction by setting fee , signatures and id . Arguments : secret str - passphrase. secondSecret str - second passphrase. fee int - manually set fee value in arktoshi . fee_included bool - see dposlib.ark.tx.Transaction.feeIncluded .","title":"Transaction"},{"location":"ark/tx/#dposlibarktx","text":"","title":"dposlib.ark.tx"},{"location":"ark/tx/#serialize","text":"def serialize(tx, **options) Serialize transaction. Arguments : tx dict or Transaction - transaction object. Returns : bytes - transaction serial representation.","title":"serialize"},{"location":"ark/tx/#transaction-objects","text":"class Transaction(dict) A python dict that implements all the necessities to manually generate valid transactions.","title":"Transaction Objects"},{"location":"ark/tx/#feeincluded","text":"If True then amount + fee = total arktoshi flow","title":"feeIncluded"},{"location":"ark/tx/#usedynamicfee","text":"@staticmethod def useDynamicFee(value=\"minFee\") Activate and configure dynamic fees parameters. Value can be either an integer defining the fee multiplier constant or a string defining the fee level to use acccording to the 30-days-average. possible values are avgFee minFee (default) and maxFee . Arguments : value str or int - constant or fee multiplier.","title":"useDynamicFee"},{"location":"ark/tx/#link","text":"def link(secret=None, secondSecret=None) Save public and private keys derived from secrets. This is equivalent to wallet login. it limits number of secret keyboard entries. Arguments : secret str - passphrase. secondSecret str - second passphrase.","title":"link"},{"location":"ark/tx/#sign","text":"def sign() Generate the signature field. Private key have to be set first.","title":"sign"},{"location":"ark/tx/#signsign","text":"def signSign() Generate the signSignature field. Transaction have to be signed and second private key have to be set first.","title":"signSign"},{"location":"ark/tx/#signwithsecret","text":"def signWithSecret(secret) Generate the signature field using passphrase. The associated public and private keys are stored till dposlib.ark.unlink is called. Arguments : secret str - passphrase.","title":"signWithSecret"},{"location":"ark/tx/#signsignwithsecondsecret","text":"def signSignWithSecondSecret(secondSecret) Generate the signSignature field using second passphrase. The associated second public and private keys are stored till dposlib.ark.unlink is called. Arguments : secondSecret str - second passphrase.","title":"signSignWithSecondSecret"},{"location":"ark/tx/#multisignwithsecret","text":"def multiSignWithSecret(secret) Add a signature in signatures field. Arguments : index int - signature index. secret str - passphrase.","title":"multiSignWithSecret"},{"location":"ark/tx/#signwithkeys","text":"def signWithKeys(publicKey, privateKey) Generate the signature field using public and private keys. They are stored till dposlib.ark.unlink is called. Arguments : publicKey str - public key as hex string. privateKey str - private key as hex string.","title":"signWithKeys"},{"location":"ark/tx/#signsignwithkey","text":"def signSignWithKey(secondPrivateKey) Generate the signSignature field using second private key. It is stored till dposlib.ark.unlink is called. Arguments : secondPrivateKey str - second private key as hex string.","title":"signSignWithKey"},{"location":"ark/tx/#multisignwithkey","text":"def multiSignWithKey(privateKey) Add a signature in signatures field according to given index and privateKey. Arguments : privateKey str - private key as hex string.","title":"multiSignWithKey"},{"location":"ark/tx/#appendmultisignature","text":"def appendMultiSignature(publicKey, signature) Manage the place of signature in signatures list for multisignature wallet transaction or registration.","title":"appendMultiSignature"},{"location":"ark/tx/#identify","text":"def identify() Generate the id field. Transaction have to be signed.","title":"identify"},{"location":"ark/tx/#finalize","text":"def finalize(secret=None, secondSecret=None, fee=None, fee_included=False) Finalize a transaction by setting fee , signatures and id . Arguments : secret str - passphrase. secondSecret str - second passphrase. fee int - manually set fee value in arktoshi . fee_included bool - see dposlib.ark.tx.Transaction.feeIncluded .","title":"finalize"},{"location":"ark/builders/builders/","text":"dposlib.ark.builders dposlib.ark.builders package provides dposlib.ark.tx.Transaction class and its associated builders. Builders are automatically set into dposlib.core package according to network. >>> import dposlib >>> from dposlib import rest >>> rest.use(\"dark\") True >>> tx = dposlib.core.transfer( ... 1, ... \"D7seWn8JLVwX4nHd9hh2Lf7gvZNiRJ7qLk\", ... u\"simple message with sparkle \\u2728\", ... version=2 ... ) >>> tx.finalize(\"first secret\", \"second secret\") >>> broadcastTransactions(tx).get(\"data\", {}).get(\"broadcast\", []) [u'041ad1e3dd06d29ef59b2c7e19fea4ced0e7fcf9fdc22edcf26e5cc016e10f38'] Available builders according to network blockchain builders * transfer, registerSecondSecret, registerSecondPublicKey, registerAsDelegate, upVote, downVote, registerMultiSignature, registerIpfs delegateResignation, htlcSecret, htlcLock, htlcClaim, htlcRefund, switchVote ark , dark entityRegister, entityUpdate, entityResign sxp , tsxp burn nos , dnos TODO","title":"builders"},{"location":"ark/builders/builders/#dposlibarkbuilders","text":"dposlib.ark.builders package provides dposlib.ark.tx.Transaction class and its associated builders. Builders are automatically set into dposlib.core package according to network. >>> import dposlib >>> from dposlib import rest >>> rest.use(\"dark\") True >>> tx = dposlib.core.transfer( ... 1, ... \"D7seWn8JLVwX4nHd9hh2Lf7gvZNiRJ7qLk\", ... u\"simple message with sparkle \\u2728\", ... version=2 ... ) >>> tx.finalize(\"first secret\", \"second secret\") >>> broadcastTransactions(tx).get(\"data\", {}).get(\"broadcast\", []) [u'041ad1e3dd06d29ef59b2c7e19fea4ced0e7fcf9fdc22edcf26e5cc016e10f38'] Available builders according to network blockchain builders * transfer, registerSecondSecret, registerSecondPublicKey, registerAsDelegate, upVote, downVote, registerMultiSignature, registerIpfs delegateResignation, htlcSecret, htlcLock, htlcClaim, htlcRefund, switchVote ark , dark entityRegister, entityUpdate, entityResign sxp , tsxp burn nos , dnos TODO","title":"dposlib.ark.builders"},{"location":"ark/builders/v2/","text":"dposlib.ark.builders.v2 transfer def transfer(amount, address, vendorField=None, expiration=0) Build a transfer transaction. Emoji can be included in transaction vendorField using unicode formating. >>> vendorField = u\"message with sparkles \\u2728\" Arguments : amount float - transaction amount in ark. address str - valid recipient address. vendorField str - vendor field message. expiration float - time of persistance in hour. Returns : dposlib.ark.tx.Transaction - orphan transaction. registerSecondSecret def registerSecondSecret(secondSecret) Build a second secret registration transaction. Arguments : secondSecret str - passphrase. Returns : dposlib.ark.tx.Transaction - orphan transaction. registerSecondPublicKey def registerSecondPublicKey(secondPublicKey) Build a second secret registration transaction. You must own the secret issuing secondPublicKey Arguments : secondPublicKey str - public key as hex string. Returns : dposlib.ark.tx.Transaction - orphan transaction. registerAsDelegate def registerAsDelegate(username) Build a delegate registration transaction. Arguments : username str - delegate username. Returns : dposlib.ark.tx.Transaction - orphan transaction. upVote def upVote(*usernames) Build an upvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.ark.tx.Transaction - orphan transaction. downVote def downVote(*usernames) Build a downvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.ark.tx.Transaction - orphan transaction. registerMultiSignature def registerMultiSignature(minSig, *publicKeys) Build a multisignature registration transaction. Arguments : minSig int - minimum signature required. publicKeys list of str - public key list. Returns : dposlib.ark.tx.Transaction - orphan transaction. registerIpfs def registerIpfs(ipfs) Build an IPFS registration transaction. Arguments : ipfs str - ipfs DAG. Returns : dposlib.ark.tx.Transaction - orphan transaction. multiPayment def multiPayment(*pairs, **kwargs) Build multi-payment transaction. Emoji can be included in transaction vendorField using unicode formating. >>> u\"message with sparkles \\u2728\" Arguments : pairs iterable - recipient-amount pair iterable. vendorField str - vendor field message. Returns : dposlib.ark.tx.Transaction - orphan transaction. delegateResignation def delegateResignation() Build a delegate resignation transaction. Returns : dposlib.ark.tx.Transaction - orphan transaction. htlcSecret def htlcSecret(secret) Compute an HTLC secret hex string from passphrase. Arguments : secret str - passphrase. Returns : hex str: HTLC secret. htlcLock def htlcLock(amount, address, secret, expiration=24, vendorField=None) Build an HTLC lock transaction. Emoji can be included in transaction vendorField using unicode formating. >>> vendorField = u\"message with sparkles \\u2728\" Arguments : amount float - transaction amount in ark. address str - valid recipient address. secret str - lock passphrase. expiration float - transaction validity in hour. vendorField str - vendor field message. Returns : dposlib.ark.tx.Transaction - orphan transaction. htlcClaim def htlcClaim(txid, secret) Build an HTLC claim transaction. Arguments : txid str - htlc lock transaction id. secret str - passphrase used by htlc lock transaction. Returns : dposlib.ark.tx.Transaction - orphan transaction. htlcRefund def htlcRefund(txid) Build an HTLC refund transaction. Arguments : txid str - htlc lock transaction id. Returns : dposlib.ark.tx.Transaction - orphan transaction. entityRegister def entityRegister(name, type=\"business\", subtype=0, ipfsData=None) Build an entity registration. Arguments : name str - entity name type str - entity type. Possible values are business , product , plugin , module and delegate . Default to business . subtype int - entity subtype ipfsData base58 - ipfs DAG. Default to None. Returns : dposlib.ark.tx.Transaction - orphan transaction. entityUpdate def entityUpdate(registrationId, ipfsData, name=None) Build an entity update. Arguments : registrationId str - registration id ipfsData base58 - ipfs DAG. Default to None. name str, optional - entity name Returns : dposlib.ark.tx.Transaction - orphan transaction. entityResign def entityResign(registrationId) Build an entity resignation. Arguments : registrationId str - registration id Returns : dposlib.ark.tx.Transaction - orphan transaction. switchVote def switchVote(tx, identifier=None) Transform a dposlib.ark.builders.upVote transaction into a multivote one. It makes the transaction downvote former delegate if any and then apply new vote. Arguments : tx dposlib.ark.tx.Transaction - upVote transaction. identifier dposlib.ark.tx.Transaction - any identifier accepted by /api/wallets API endpoint. it could be a username, a wallet address or a publicKey. Returns : dposlib.ark.tx.Transaction - orphan transaction. burn def burn(amount, vendorField=None) Build a burn transaction. ``` Args: amount (float): transaction amount as human value. Returns: dposlib.ark.tx.Transaction: orphan transaction.","title":"V2"},{"location":"ark/builders/v2/#dposlibarkbuildersv2","text":"","title":"dposlib.ark.builders.v2"},{"location":"ark/builders/v2/#transfer","text":"def transfer(amount, address, vendorField=None, expiration=0) Build a transfer transaction. Emoji can be included in transaction vendorField using unicode formating. >>> vendorField = u\"message with sparkles \\u2728\" Arguments : amount float - transaction amount in ark. address str - valid recipient address. vendorField str - vendor field message. expiration float - time of persistance in hour. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"transfer"},{"location":"ark/builders/v2/#registersecondsecret","text":"def registerSecondSecret(secondSecret) Build a second secret registration transaction. Arguments : secondSecret str - passphrase. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"registerSecondSecret"},{"location":"ark/builders/v2/#registersecondpublickey","text":"def registerSecondPublicKey(secondPublicKey) Build a second secret registration transaction. You must own the secret issuing secondPublicKey Arguments : secondPublicKey str - public key as hex string. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"registerSecondPublicKey"},{"location":"ark/builders/v2/#registerasdelegate","text":"def registerAsDelegate(username) Build a delegate registration transaction. Arguments : username str - delegate username. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"registerAsDelegate"},{"location":"ark/builders/v2/#upvote","text":"def upVote(*usernames) Build an upvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"upVote"},{"location":"ark/builders/v2/#downvote","text":"def downVote(*usernames) Build a downvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"downVote"},{"location":"ark/builders/v2/#registermultisignature","text":"def registerMultiSignature(minSig, *publicKeys) Build a multisignature registration transaction. Arguments : minSig int - minimum signature required. publicKeys list of str - public key list. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"registerMultiSignature"},{"location":"ark/builders/v2/#registeripfs","text":"def registerIpfs(ipfs) Build an IPFS registration transaction. Arguments : ipfs str - ipfs DAG. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"registerIpfs"},{"location":"ark/builders/v2/#multipayment","text":"def multiPayment(*pairs, **kwargs) Build multi-payment transaction. Emoji can be included in transaction vendorField using unicode formating. >>> u\"message with sparkles \\u2728\" Arguments : pairs iterable - recipient-amount pair iterable. vendorField str - vendor field message. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"multiPayment"},{"location":"ark/builders/v2/#delegateresignation","text":"def delegateResignation() Build a delegate resignation transaction. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"delegateResignation"},{"location":"ark/builders/v2/#htlcsecret","text":"def htlcSecret(secret) Compute an HTLC secret hex string from passphrase. Arguments : secret str - passphrase. Returns : hex str: HTLC secret.","title":"htlcSecret"},{"location":"ark/builders/v2/#htlclock","text":"def htlcLock(amount, address, secret, expiration=24, vendorField=None) Build an HTLC lock transaction. Emoji can be included in transaction vendorField using unicode formating. >>> vendorField = u\"message with sparkles \\u2728\" Arguments : amount float - transaction amount in ark. address str - valid recipient address. secret str - lock passphrase. expiration float - transaction validity in hour. vendorField str - vendor field message. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"htlcLock"},{"location":"ark/builders/v2/#htlcclaim","text":"def htlcClaim(txid, secret) Build an HTLC claim transaction. Arguments : txid str - htlc lock transaction id. secret str - passphrase used by htlc lock transaction. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"htlcClaim"},{"location":"ark/builders/v2/#htlcrefund","text":"def htlcRefund(txid) Build an HTLC refund transaction. Arguments : txid str - htlc lock transaction id. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"htlcRefund"},{"location":"ark/builders/v2/#entityregister","text":"def entityRegister(name, type=\"business\", subtype=0, ipfsData=None) Build an entity registration. Arguments : name str - entity name type str - entity type. Possible values are business , product , plugin , module and delegate . Default to business . subtype int - entity subtype ipfsData base58 - ipfs DAG. Default to None. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"entityRegister"},{"location":"ark/builders/v2/#entityupdate","text":"def entityUpdate(registrationId, ipfsData, name=None) Build an entity update. Arguments : registrationId str - registration id ipfsData base58 - ipfs DAG. Default to None. name str, optional - entity name Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"entityUpdate"},{"location":"ark/builders/v2/#entityresign","text":"def entityResign(registrationId) Build an entity resignation. Arguments : registrationId str - registration id Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"entityResign"},{"location":"ark/builders/v2/#switchvote","text":"def switchVote(tx, identifier=None) Transform a dposlib.ark.builders.upVote transaction into a multivote one. It makes the transaction downvote former delegate if any and then apply new vote. Arguments : tx dposlib.ark.tx.Transaction - upVote transaction. identifier dposlib.ark.tx.Transaction - any identifier accepted by /api/wallets API endpoint. it could be a username, a wallet address or a publicKey. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"switchVote"},{"location":"ark/builders/v2/#burn","text":"def burn(amount, vendorField=None) Build a burn transaction. ``` Args: amount (float): transaction amount as human value. Returns: dposlib.ark.tx.Transaction: orphan transaction.","title":"burn"},{"location":"ark/builders/v3/","text":"dposlib.ark.builders.v3 upVote def upVote(*usernames) Build an upvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.ark.tx.Transaction - orphan transaction. downVote def downVote(*usernames) Build a downvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.ark.tx.Transaction - orphan transaction. switchVote def switchVote(tx, identifier=None) Transform a dposlib.ark.builders.upVote transaction into a multivote one. It makes the transaction downvote former delegate if any and then apply new vote. Arguments : tx dposlib.ark.tx.Transaction - upVote transaction. identifier dposlib.ark.tx.Transaction - any identifier accepted by /api/wallets API endpoint. it could be a username, a wallet address or a publicKey. Returns : dposlib.ark.tx.Transaction - orphan transaction. htlcSecret def htlcSecret(secret, hash_type=0) Compute an HTLC secret from passphrase. Arguments : secret str - passphrase. hash_type int - hash method used. Returns : bytes - HTLC secret. htlcLock def htlcLock(amount, address, secret, expiration=24, vendorField=None, hash_type=0) Build an HTLC lock transaction. Emoji can be included in transaction vendorField using unicode formating. >>> vendorField = u\"message with sparkles \\u2728\" Arguments : amount float - transaction amount in ark. address str - valid recipient address. secret str - lock passphrase. expiration float - transaction validity in hour. vendorField str - vendor field message. hash_type int - hash method used. Returns : dposlib.ark.tx.Transaction - orphan transaction. htlcClaim def htlcClaim(txid, secret, hash_type=0) Build an HTLC claim transaction. Arguments : txid str - htlc lock transaction id. secret str - passphrase used by htlc lock transaction. hash_type int - hash method used. Returns : dposlib.ark.tx.Transaction - orphan transaction. burn def burn(amount, vendorField=None) Build a burn transaction. ``` Args: amount (float): transaction amount as human value. Returns: dposlib.ark.tx.Transaction: orphan transaction.","title":"V3"},{"location":"ark/builders/v3/#dposlibarkbuildersv3","text":"","title":"dposlib.ark.builders.v3"},{"location":"ark/builders/v3/#upvote","text":"def upVote(*usernames) Build an upvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"upVote"},{"location":"ark/builders/v3/#downvote","text":"def downVote(*usernames) Build a downvote transaction. Arguments : usernames iterable - delegate usernames as str iterable. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"downVote"},{"location":"ark/builders/v3/#switchvote","text":"def switchVote(tx, identifier=None) Transform a dposlib.ark.builders.upVote transaction into a multivote one. It makes the transaction downvote former delegate if any and then apply new vote. Arguments : tx dposlib.ark.tx.Transaction - upVote transaction. identifier dposlib.ark.tx.Transaction - any identifier accepted by /api/wallets API endpoint. it could be a username, a wallet address or a publicKey. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"switchVote"},{"location":"ark/builders/v3/#htlcsecret","text":"def htlcSecret(secret, hash_type=0) Compute an HTLC secret from passphrase. Arguments : secret str - passphrase. hash_type int - hash method used. Returns : bytes - HTLC secret.","title":"htlcSecret"},{"location":"ark/builders/v3/#htlclock","text":"def htlcLock(amount, address, secret, expiration=24, vendorField=None, hash_type=0) Build an HTLC lock transaction. Emoji can be included in transaction vendorField using unicode formating. >>> vendorField = u\"message with sparkles \\u2728\" Arguments : amount float - transaction amount in ark. address str - valid recipient address. secret str - lock passphrase. expiration float - transaction validity in hour. vendorField str - vendor field message. hash_type int - hash method used. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"htlcLock"},{"location":"ark/builders/v3/#htlcclaim","text":"def htlcClaim(txid, secret, hash_type=0) Build an HTLC claim transaction. Arguments : txid str - htlc lock transaction id. secret str - passphrase used by htlc lock transaction. hash_type int - hash method used. Returns : dposlib.ark.tx.Transaction - orphan transaction.","title":"htlcClaim"},{"location":"ark/builders/v3/#burn","text":"def burn(amount, vendorField=None) Build a burn transaction. ``` Args: amount (float): transaction amount as human value. Returns: dposlib.ark.tx.Transaction: orphan transaction.","title":"burn"}]}